{"version":3,"file":"index-BrEfG9ZW.js","sources":["../constants.js","../audioManager.js","../textureManager.js","../scoreManager.js","../particleSystem.js","../fruitFactory.js","../socialShare.js","../comboSystem.js","../leaderboard.js","../main.js"],"sourcesContent":["// Container dimensions\nexport const CONTAINER_WIDTH = 6;\nexport const CONTAINER_HEIGHT = 10;\nexport const CONTAINER_DEPTH = 4;\n\n// Game parameters\nexport const COOLDOWN_DELAY = 350; // milliseconds for dropping fruit cooldown\nexport const DROP_DELAY = 300; // milliseconds minimum time between drops\nexport const GAME_OVER_HEIGHT = CONTAINER_HEIGHT - 1.5; // Height threshold for game over, allowing fruits to be within the container\n\n// Material properties\nexport const PAPER_BAG_COLOR = 0xA0522D; // Sienna brown\nexport const PAPER_BAG_EMISSIVE = 0x3D1C02; // Dark brown emissive\nexport const PAPER_BAG_EMISSIVE_INTENSITY = 0.6;\n\n// Audio settings\nexport const DEFAULT_MUSIC_VOLUME = 0.05;\nexport const DEFAULT_SOUND_EFFECTS_VOLUME = 0.3;\n\n// Lighting parameters\nexport const MAIN_LIGHT_INTENSITY = 1.5;\nexport const AMBIENT_LIGHT_INTENSITY = 1.0;\nexport const BAG_LIGHT_INTENSITY = 1.2;\nexport const SPOTLIGHT_INTENSITY = 1.0;\n\n// Fruits data (reference only - keep the actual array in main.js due to emoji and complexity)\n// Exported as a comment for reference\n/*\nconst FRUITS = [\n    { name: 'Cherry', radius: 0.25, color: 0xFF0000, points: 1, emoji: '🍒' },\n    { name: 'Strawberry', radius: 0.35, color: 0xFF0044, points: 2, emoji: '🍓' },\n    { name: 'Grape', radius: 0.5, color: 0x9400D3, points: 3, emoji: '🍇' },\n    ...\n];\n*/\n","// Import constants\nimport { \n    DEFAULT_MUSIC_VOLUME,\n    DEFAULT_SOUND_EFFECTS_VOLUME\n} from './constants.js';\n\n/**\n * AudioManager handles all sound effects and background music for the game\n */\nexport class AudioManager {\n    constructor() {\n        this.audioContext = null;\n        this.sounds = {};\n        this.musicNodes = null;\n        this.musicPlaying = false;\n        this.soundEffectsVolume = DEFAULT_SOUND_EFFECTS_VOLUME;\n        this.musicVolume = DEFAULT_MUSIC_VOLUME;\n        this.lastScheduledTime = 0;\n        this.loopCheckInterval = null;\n    }\n\n    /**\n     * Initialize the audio context and set up event listeners\n     */\n    init() {\n        // Create audio context on first user interaction to satisfy autoplay policy\n        try {\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            \n            // Resume audio context for mobile devices\n            if (this.audioContext.state === 'suspended') {\n                const resumeAudio = async () => {\n                    await this.audioContext.resume();\n                    // Remove the event listeners once audio is running\n                    ['touchstart', 'touchend', 'click'].forEach(event => {\n                        document.removeEventListener(event, resumeAudio);\n                    });\n                };\n                \n                // Add event listeners for both touch and click events\n                ['touchstart', 'touchend', 'click'].forEach(event => {\n                    document.addEventListener(event, resumeAudio);\n                });\n            }\n        } catch (e) {\n            console.error(\"Web Audio API not supported:\", e);\n        }\n\n        // Load all sounds\n        this.loadSounds();\n        \n        // Create UI controls\n        this.createMusicControls();\n        this.createVolumeControls();\n        \n        // Setup music nodes\n        this.createBackgroundMusic();\n    }\n\n    /**\n     * Load all sound effects\n     */\n    loadSounds() {\n        if (!this.audioContext) return;\n        \n        this.sounds = {\n            drop: () => this.playDropSound(),\n            hit: () => this.playCollisionSound(),\n            merge: () => this.playMergeSound()\n        };\n    }\n\n    /**\n     * Play a gentle drop sound when fruit is released\n     */\n    playDropSound() {\n        if (!this.audioContext) return;\n        \n        const now = this.audioContext.currentTime;\n        \n        // Use a more pleasant triangle wave for drop sound\n        const oscillator = this.audioContext.createOscillator();\n        oscillator.type = 'triangle';\n        oscillator.frequency.value = 350;\n        oscillator.frequency.exponentialRampToValueAtTime(250, now + 0.1);\n        \n        // Create filter for a softer sound\n        const filter = this.audioContext.createBiquadFilter();\n        filter.type = 'lowpass';\n        filter.frequency.value = 800;\n        \n        // Create gain node for volume control\n        const gainNode = this.audioContext.createGain();\n        gainNode.gain.value = 0;\n        gainNode.gain.setValueAtTime(0, now);\n        gainNode.gain.linearRampToValueAtTime(this.soundEffectsVolume * 0.5, now + 0.01);\n        gainNode.gain.linearRampToValueAtTime(0, now + 0.3);\n        \n        // Connect the audio graph\n        oscillator.connect(filter);\n        filter.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        \n        // Start and stop\n        oscillator.start(now);\n        oscillator.stop(now + 0.3);\n    }\n    \n    /**\n     * Play a soft collision sound when fruits hit each other or walls\n     */\n    playCollisionSound() {\n        if (!this.audioContext) return;\n        \n        const now = this.audioContext.currentTime;\n        \n        // Create noise for a more natural collision sound\n        const bufferSize = this.audioContext.sampleRate * 0.1; // 100ms buffer\n        const buffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate);\n        const data = buffer.getChannelData(0);\n        \n        // Fill the buffer with filtered noise\n        for (let i = 0; i < bufferSize; i++) {\n            // Softer noise (more weighted towards zero)\n            data[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / bufferSize, 2) * 0.5;\n        }\n        \n        // Create noise source\n        const noiseSource = this.audioContext.createBufferSource();\n        noiseSource.buffer = buffer;\n        \n        // Create filter for wood-like tonal quality\n        const filter = this.audioContext.createBiquadFilter();\n        filter.type = 'bandpass';\n        filter.frequency.value = 600;\n        filter.Q.value = 1;\n        \n        // Create gain node\n        const gainNode = this.audioContext.createGain();\n        gainNode.gain.value = this.soundEffectsVolume * 0.4;\n        gainNode.gain.setValueAtTime(this.soundEffectsVolume * 0.4, now);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.15);\n        \n        // Connect nodes\n        noiseSource.connect(filter);\n        filter.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        \n        // Start sound\n        noiseSource.start(now);\n    }\n    \n    /**\n     * Play a satisfying merge sound when fruits combine\n     */\n    playMergeSound() {\n        if (!this.audioContext) return;\n        \n        const now = this.audioContext.currentTime;\n        \n        // Create a boom effect with low frequency oscillator\n        const boomOsc = this.audioContext.createOscillator();\n        boomOsc.type = 'sine';\n        boomOsc.frequency.value = 80; // Much lower frequency for boom effect\n        boomOsc.frequency.exponentialRampToValueAtTime(40, now + 0.3); // Falling pitch for boom effect\n        \n        // Add compression for punchier sound\n        const compressor = this.audioContext.createDynamicsCompressor();\n        compressor.threshold.value = -24;\n        compressor.knee.value = 30;\n        compressor.ratio.value = 12;\n        compressor.attack.value = 0.003;\n        compressor.release.value = 0.25;\n        \n        // Add low-pass filter for boom character\n        const boomFilter = this.audioContext.createBiquadFilter();\n        boomFilter.type = 'lowpass';\n        boomFilter.frequency.value = 800;\n        boomFilter.frequency.exponentialRampToValueAtTime(80, now + 0.4);\n        boomFilter.Q.value = 1;\n        \n        // Create gain node for boom volume\n        const boomGain = this.audioContext.createGain();\n        boomGain.gain.value = 0;\n        boomGain.gain.setValueAtTime(0, now);\n        boomGain.gain.linearRampToValueAtTime(this.soundEffectsVolume * 0.8, now + 0.02);\n        boomGain.gain.exponentialRampToValueAtTime(0.001, now + 0.5);\n        \n        // Connect boom components\n        boomOsc.connect(boomFilter);\n        boomFilter.connect(compressor);\n        compressor.connect(boomGain);\n        boomGain.connect(this.audioContext.destination);\n        \n        // Add noise burst for impact texture\n        const bufferSize = this.audioContext.sampleRate * 0.2; // 200ms buffer\n        const noiseBuffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate);\n        const noiseData = noiseBuffer.getChannelData(0);\n        \n        // Create noise with a quick decay curve\n        for (let i = 0; i < bufferSize; i++) {\n            // Quick decay for the noise component\n            const decay = Math.pow(1 - i / bufferSize, 3);\n            noiseData[i] = (Math.random() * 2 - 1) * decay * 0.7;\n        }\n        \n        // Create noise source\n        const noiseSource = this.audioContext.createBufferSource();\n        noiseSource.buffer = noiseBuffer;\n        \n        // Filter for the noise component\n        const noiseFilter = this.audioContext.createBiquadFilter();\n        noiseFilter.type = 'bandpass';\n        noiseFilter.frequency.value = 250;\n        noiseFilter.Q.value = 0.7;\n        \n        // Gain node for noise component\n        const noiseGain = this.audioContext.createGain();\n        noiseGain.gain.value = this.soundEffectsVolume * 0.25;\n        noiseGain.gain.setValueAtTime(this.soundEffectsVolume * 0.25, now);\n        noiseGain.gain.exponentialRampToValueAtTime(0.001, now + 0.15);\n        \n        // Connect noise components\n        noiseSource.connect(noiseFilter);\n        noiseFilter.connect(noiseGain);\n        noiseGain.connect(this.audioContext.destination);\n        \n        // Add a subtle mid-tone \"knock\" element\n        const knockOsc = this.audioContext.createOscillator();\n        knockOsc.type = 'triangle';\n        knockOsc.frequency.value = 180;\n        knockOsc.frequency.exponentialRampToValueAtTime(120, now + 0.1);\n        \n        // Gain for the knock sound\n        const knockGain = this.audioContext.createGain();\n        knockGain.gain.value = 0;\n        knockGain.gain.setValueAtTime(0, now);\n        knockGain.gain.linearRampToValueAtTime(this.soundEffectsVolume * 0.3, now + 0.01);\n        knockGain.gain.exponentialRampToValueAtTime(0.001, now + 0.2);\n        \n        // Connect knock components\n        knockOsc.connect(knockGain);\n        knockGain.connect(this.audioContext.destination);\n        \n        // Start all sound components\n        boomOsc.start(now);\n        boomOsc.stop(now + 0.5);\n        noiseSource.start(now);\n        knockOsc.start(now);\n        knockOsc.stop(now + 0.2);\n    }\n\n    /**\n     * Play a simple tone sound effect (legacy method kept for compatibility)\n     */\n    playTone(audioContext, frequency, duration) {\n        if (!audioContext) return;\n        \n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        \n        oscillator.type = 'sine';\n        oscillator.frequency.value = frequency;\n        \n        gainNode.gain.value = this.soundEffectsVolume;\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        \n        oscillator.start();\n        oscillator.stop(audioContext.currentTime + duration);\n    }\n\n    /**\n     * Play a sound by name\n     */\n    playSound(name) {\n        try {\n            const sound = this.sounds[name];\n            if (sound && typeof sound === 'function') {\n                sound();\n            }\n        } catch (e) {\n            console.error(\"Error playing sound:\", e);\n        }\n    }\n\n    /**\n     * Create UI controls for music - disabled\n     */\n    createMusicControls() {\n        // Music controls removed\n    }\n    \n    /**\n     * Create volume control sliders\n     */\n    createVolumeControls() {\n        // Create container for volume controls\n        const volumeControls = document.createElement('div');\n        volumeControls.style.position = 'absolute';\n        volumeControls.style.bottom = '10px';\n        volumeControls.style.left = '10px';\n        volumeControls.style.zIndex = '1000';\n        volumeControls.style.backgroundColor = 'rgba(0, 0, 0, 0.6)';\n        volumeControls.style.padding = '10px';\n        volumeControls.style.borderRadius = '4px';\n        volumeControls.style.fontFamily = 'Arial, sans-serif';\n        volumeControls.style.color = 'white';\n        volumeControls.style.display = 'flex';\n        volumeControls.style.flexDirection = 'column';\n        volumeControls.style.gap = '8px';\n        \n        // Volume control for sound effects\n        const soundEffectsContainer = document.createElement('div');\n        soundEffectsContainer.style.display = 'flex';\n        soundEffectsContainer.style.alignItems = 'center';\n        soundEffectsContainer.style.gap = '8px';\n        \n        const soundLabel = document.createElement('label');\n        soundLabel.textContent = '🔊 Effects:';\n        soundLabel.style.width = '80px';\n        \n        const soundSlider = document.createElement('input');\n        soundSlider.type = 'range';\n        soundSlider.min = '0';\n        soundSlider.max = '100';\n        soundSlider.value = Math.round(this.soundEffectsVolume * 100);\n        soundSlider.style.width = '100px';\n        \n        soundSlider.addEventListener('input', (e) => {\n            this.soundEffectsVolume = parseInt(e.target.value) / 100;\n        });\n        \n        soundEffectsContainer.appendChild(soundLabel);\n        soundEffectsContainer.appendChild(soundSlider);\n        \n        // Volume control for music\n        const musicVolumeContainer = document.createElement('div');\n        musicVolumeContainer.style.display = 'flex';\n        musicVolumeContainer.style.alignItems = 'center';\n        musicVolumeContainer.style.gap = '8px';\n        \n        const musicLabel = document.createElement('label');\n        musicLabel.textContent = '🎵 Music:';\n        musicLabel.style.width = '80px';\n        \n        const musicSlider = document.createElement('input');\n        musicSlider.type = 'range';\n        musicSlider.min = '0';\n        musicSlider.max = '100';\n        musicSlider.value = Math.round(this.musicVolume * 100);\n        musicSlider.style.width = '100px';\n        \n        musicSlider.addEventListener('input', (e) => {\n            this.musicVolume = parseInt(e.target.value) / 100;\n            this.updateMusicVolume();\n        });\n        \n        musicVolumeContainer.appendChild(musicLabel);\n        musicVolumeContainer.appendChild(musicSlider);\n        \n        // Add controls to container\n        volumeControls.appendChild(soundEffectsContainer);\n        volumeControls.appendChild(musicVolumeContainer);\n        \n        // Add container to document\n        document.body.appendChild(volumeControls);\n    }\n    \n    /**\n     * Update music volume\n     */\n    updateMusicVolume() {\n        if (this.musicNodes && this.musicNodes.mainGainNode) {\n            this.musicNodes.mainGainNode.gain.value = this.musicVolume;\n        }\n    }\n\n    /**\n     * Create background music nodes\n     */\n    createBackgroundMusic() {\n        // Store audio nodes that need to be accessed later\n        this.musicNodes = {\n            bassOscillators: [],\n            melodySynths: [],\n            drumSounds: [],\n            mainGainNode: null\n        };\n        \n        // We'll create the actual audio nodes when play is called\n        // This avoids autoplay restrictions and saves resources\n    }\n    \n    /**\n     * Start playing the background music\n     */\n    playBackgroundMusic() {\n        if (this.musicPlaying) return;\n        \n        // Create a new audio context if needed (in case of user interaction requirement)\n        if (!this.audioContext || this.audioContext.state === 'closed') {\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        }\n        \n        // Resume audio context if suspended\n        if (this.audioContext.state === 'suspended') {\n            this.audioContext.resume();\n        }\n        \n        // Master gain for all music elements\n        const mainGain = this.audioContext.createGain();\n        mainGain.gain.value = this.musicVolume; // Use the music volume property\n        mainGain.connect(this.audioContext.destination);\n        this.musicNodes.mainGainNode = mainGain;\n        \n        // Create synthwave elements\n        this.createSynthwaveBass(mainGain);\n        this.createSynthwaveMelody(mainGain);\n        this.createSynthwaveDrums(mainGain);\n        \n        this.musicPlaying = true;\n        \n        // Set up a check to ensure music keeps playing\n        this.loopCheckInterval = setInterval(() => {\n            if (this.musicPlaying && this.audioContext && this.audioContext.state === 'running') {\n                // If we're close to the end of our scheduled music, schedule more\n                const currentTime = this.audioContext.currentTime;\n                if (currentTime > this.lastScheduledTime - 60) { // If less than 60 seconds of music left\n                    // Schedule more music\n                    this.createSynthwaveBass(mainGain, currentTime + 1);\n                    this.createSynthwaveMelody(mainGain, currentTime + 1);\n                    this.createSynthwaveDrums(mainGain, currentTime + 1);\n                }\n            }\n        }, 30000); // Check every 30 seconds\n    }\n    \n    /**\n     * Stop background music\n     */\n    stopBackgroundMusic() {\n        if (!this.musicPlaying) return;\n        \n        // Clear the loop check interval\n        if (this.loopCheckInterval) {\n            clearInterval(this.loopCheckInterval);\n            this.loopCheckInterval = null;\n        }\n        \n        // Fade out over 1 second\n        if (this.musicNodes && this.musicNodes.mainGainNode) {\n            const now = this.audioContext.currentTime;\n            this.musicNodes.mainGainNode.gain.setValueAtTime(\n                this.musicNodes.mainGainNode.gain.value, now);\n            this.musicNodes.mainGainNode.gain.linearRampToValueAtTime(0, now + 1);\n            \n            // Stop and clean up all oscillators after fade out\n            setTimeout(() => {\n                // Stop bass oscillators\n                this.musicNodes.bassOscillators.forEach(osc => {\n                    if (osc && osc.stop) osc.stop();\n                });\n                \n                // Stop melody synths\n                this.musicNodes.melodySynths.forEach(synth => {\n                    if (synth && synth.stop) synth.stop();\n                });\n                \n                // Clear all references\n                this.musicNodes.bassOscillators = [];\n                this.musicNodes.melodySynths = [];\n                this.musicNodes.drumSounds = [];\n                this.musicNodes.mainGainNode = null;\n            }, 1000);\n        }\n        \n        this.musicPlaying = false;\n    }\n    \n    /**\n     * Create synthesized bass line (simple, gentle)\n     */\n    createSynthwaveBass(outputNode, startOffset = 0) {\n        const now = this.audioContext.currentTime + startOffset;\n        \n        // Simple C major bass notes - fewer notes for simplicity\n        const bassNotes = [262, 196, 220, 196]; // C3, G2, A2, G2\n        const noteDuration = 1.0; // 1 second per note, slower and more relaxed\n        const patternDuration = bassNotes.length * noteDuration;\n        \n        // Create oscillator for bass\n        const bassOscillator = this.audioContext.createOscillator();\n        bassOscillator.type = 'sine'; // Soft sine wave\n        \n        // Simple lowpass filter\n        const bassFilter = this.audioContext.createBiquadFilter();\n        bassFilter.type = 'lowpass';\n        bassFilter.frequency.value = 500;\n        \n        // Create envelope\n        const bassEnvelope = this.audioContext.createGain();\n        \n        // Connect components\n        bassOscillator.connect(bassFilter);\n        bassFilter.connect(bassEnvelope);\n        bassEnvelope.connect(outputNode);\n        \n        // Schedule the bass line notes - simple pattern\n        const iterations = 1000;\n        for (let i = 0; i < iterations; i++) {\n            for (let j = 0; j < bassNotes.length; j++) {\n                const startTime = now + (i * patternDuration) + (j * noteDuration);\n                bassOscillator.frequency.setValueAtTime(bassNotes[j], startTime);\n                \n                // Very gentle envelope\n                bassEnvelope.gain.setValueAtTime(0, startTime);\n                bassEnvelope.gain.linearRampToValueAtTime(0.3, startTime + 0.1);\n                bassEnvelope.gain.linearRampToValueAtTime(0.2, startTime + noteDuration * 0.9);\n                \n                // Track the last scheduled time to know when to loop\n                this.lastScheduledTime = Math.max(this.lastScheduledTime || 0, startTime + noteDuration);\n            }\n        }\n        \n        // Start the oscillator\n        bassOscillator.start();\n        this.musicNodes.bassOscillators.push(bassOscillator);\n    }\n    \n    /**\n     * Create simple spring melody\n     */\n    createSynthwaveMelody(outputNode, startOffset = 0) {\n        const now = this.audioContext.currentTime + startOffset;\n        \n        // Simple C major melody notes\n        const melodyNotes = [523, 587, 659, 698, 784]; // C5, D5, E5, F5, G5\n        \n        // Simple rhythm pattern - gentle and sparse\n        const rhythmPattern = [1, 1, 2, 1.5, 1.5];\n        \n        // Create main melody synth - slower tempo (100 instead of 140)\n        this.scheduleMelodyPattern(melodyNotes, rhythmPattern, 100, outputNode, now);\n    }\n    \n    /**\n     * Schedule a melody pattern\n     */\n    scheduleMelodyPattern(notes, rhythm, tempo, outputNode, startTime) {\n        const beatDuration = 60 / tempo;\n        let currentTime = startTime;\n        \n        // Simple repeating melody pattern\n        const iterations = 200;\n        for (let repeat = 0; repeat < iterations; repeat++) {\n            // For even more simplicity, add pauses between repeats\n            if (repeat > 0) {\n                currentTime += beatDuration * 2; // Add pause between patterns\n            }\n            \n            // Simple melody sequence that doesn't always play the same way\n            const sequence = [0, 1, 2, 1, 4, 2, 3, 2]; // Indexes into notes array\n            \n            // Play through the sequence\n            for (let i = 0; i < sequence.length; i++) {\n                // Only play 80% of notes for some variation but still clear melody\n                if (Math.random() > 0.2) {\n                    const note = notes[sequence[i]];\n                    const duration = rhythm[i % rhythm.length] * beatDuration;\n                    this.playMelodyNote(note, currentTime, duration, outputNode);\n                }\n                \n                // Move time forward\n                currentTime += rhythm[i % rhythm.length] * beatDuration;\n                \n                // Track the last scheduled time\n                this.lastScheduledTime = Math.max(this.lastScheduledTime || 0, currentTime);\n            }\n        }\n    }\n    \n    /**\n     * Play a single melody note\n     */\n    playMelodyNote(frequency, startTime, duration, outputNode) {\n        // Create oscillator for the note\n        const oscillator = this.audioContext.createOscillator();\n        oscillator.type = 'sine'; // Pure sine for cleaner sound\n        oscillator.frequency.value = frequency;\n        \n        // Very minimal filtering\n        const filter = this.audioContext.createBiquadFilter();\n        filter.type = 'lowpass';\n        filter.frequency.value = 1500;\n        \n        // Create envelope\n        const envelope = this.audioContext.createGain();\n        envelope.gain.value = 0;\n        \n        // Connect components\n        oscillator.connect(filter);\n        filter.connect(envelope);\n        envelope.connect(outputNode);\n        \n        // Simple gentle envelope\n        envelope.gain.setValueAtTime(0, startTime);\n        envelope.gain.linearRampToValueAtTime(0.2, startTime + 0.1);\n        envelope.gain.linearRampToValueAtTime(0.15, startTime + duration * 0.6);\n        envelope.gain.linearRampToValueAtTime(0, startTime + duration);\n        \n        // Schedule and start the oscillator\n        oscillator.start(startTime);\n        oscillator.stop(startTime + duration);\n        \n        // Store for cleanup\n        this.musicNodes.melodySynths.push(oscillator);\n    }\n    \n    /**\n     * Create minimal drum sounds\n     */\n    createSynthwaveDrums(outputNode, startOffset = 0) {\n        const tempo = 100; // Slower tempo\n        const beatDuration = 60 / tempo;\n        const now = this.audioContext.currentTime + startOffset;\n        \n        // Schedule minimal drum pattern\n        for (let bar = 0; bar < 100; bar++) {\n            const barStartTime = now + (bar * beatDuration * 4);\n            \n            // Very minimal kick - just on beat 1\n            this.playKickDrum(barStartTime, outputNode);\n            \n            // Occasional very light hi-hat\n            if (bar % 2 === 0) { // Only every other bar\n                this.playHiHat(barStartTime + beatDuration * 2, outputNode, 0.1);\n            }\n            \n            // Track scheduled time\n            this.lastScheduledTime = Math.max(this.lastScheduledTime || 0, barStartTime + (beatDuration * 4));\n        }\n    }\n    \n    /**\n     * Create a very gentle kick drum sound\n     */\n    playKickDrum(time, outputNode) {\n        if (!this.audioContext) return;\n        \n        // Oscillator for the kick\n        const osc = this.audioContext.createOscillator();\n        osc.type = 'sine';\n        \n        // Gain node for envelope\n        const gainNode = this.audioContext.createGain();\n        gainNode.gain.value = 0;\n        \n        // Connect\n        osc.connect(gainNode);\n        gainNode.connect(outputNode);\n        \n        // Gentle frequency sweep\n        osc.frequency.setValueAtTime(80, time);\n        osc.frequency.exponentialRampToValueAtTime(40, time + 0.1);\n        \n        // Very gentle envelope\n        gainNode.gain.setValueAtTime(0, time);\n        gainNode.gain.linearRampToValueAtTime(0.2, time + 0.02);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, time + 0.3);\n        \n        // Schedule\n        osc.start(time);\n        osc.stop(time + 0.3);\n        \n        // Store for cleanup\n        this.musicNodes.drumSounds.push(osc);\n    }\n    \n    /**\n     * Create a very light hi-hat sound\n     */\n    playHiHat(time, outputNode, velocity = 0.1) {\n        if (!this.audioContext) return;\n        \n        // Simple high-frequency oscillator\n        const osc = this.audioContext.createOscillator();\n        osc.type = 'sine';\n        osc.frequency.value = 8000;\n        \n        // Simple highpass filter\n        const filter = this.audioContext.createBiquadFilter();\n        filter.type = 'highpass';\n        filter.frequency.value = 7000;\n        \n        // Gain node for envelope\n        const gainNode = this.audioContext.createGain();\n        gainNode.gain.value = 0;\n        \n        // Connect\n        osc.connect(filter);\n        filter.connect(gainNode);\n        gainNode.connect(outputNode);\n        \n        // Very gentle envelope\n        gainNode.gain.setValueAtTime(0, time);\n        gainNode.gain.linearRampToValueAtTime(velocity, time + 0.001);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, time + 0.05);\n        \n        // Schedule\n        osc.start(time);\n        osc.stop(time + 0.05);\n        \n        // Store for cleanup\n        this.musicNodes.drumSounds.push(osc);\n    }\n    \n    /**\n     * This method is eliminated since we're simplifying\n     */\n    playSnare(time, outputNode, velocity = 0.1) {\n        // Not used in the simplified version\n    }\n}\n\n// Export a singleton instance\nexport const audioManager = new AudioManager();\n","import * as THREE from 'three';\n\n/**\n * TextureManager handles the creation and management of all textures used in the game\n */\nexport class TextureManager {\n    constructor() {\n        // Initialize texture properties\n        this.orangeTexture = null;\n        this.strawberryTexture = null;\n        this.watermelonTexture = null;\n        this.grapeTexture = null;\n        this.grapeAltTexture = null; // New alternate grape texture with face\n        this.appleTexture = null;\n        this.pearTexture = null;\n        this.peachTexture = null;\n        this.pumpkinTexture = null;\n        this.melonTexture = null;\n        this.paperTexture = null;\n        \n        // Create all textures\n        this.createProceduralTextures();\n        this.createPaperTexture();\n    }\n    \n    /**\n     * Create paper texture used for the container\n     */\n    createPaperTexture() {\n        // Create a procedural paper bag texture\n        const textureSize = 512;\n        const canvas = document.createElement('canvas');\n        canvas.width = textureSize;\n        canvas.height = textureSize;\n        const ctx = canvas.getContext('2d');\n        \n        // Base paper color - kraft paper brown\n        ctx.fillStyle = '#C49A6C';\n        ctx.fillRect(0, 0, textureSize, textureSize);\n        \n        // Add paper grain texture\n        const imageData = ctx.getImageData(0, 0, textureSize, textureSize);\n        const data = imageData.data;\n        \n        // Add paper grain noise\n        for (let i = 0; i < data.length; i += 4) {\n            // More varied, natural-looking noise for paper grain\n            const noise = Math.random() * 20 - 10;\n            data[i] = Math.max(0, Math.min(255, data[i] + noise));       // R\n            data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + noise * 0.9)); // G\n            data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + noise * 0.8)); // B\n        }\n        \n        ctx.putImageData(imageData, 0, 0);\n        \n        // Add some darker edges for depth\n        const edgeGradient = ctx.createRadialGradient(\n            textureSize/2, textureSize/2, textureSize/2 * 0.7,\n            textureSize/2, textureSize/2, textureSize/2\n        );\n        edgeGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n        edgeGradient.addColorStop(1, 'rgba(0, 0, 0, 0.2)');\n        \n        ctx.fillStyle = edgeGradient;\n        ctx.fillRect(0, 0, textureSize, textureSize);\n        \n        // Add creases and fold lines\n        for (let i = 0; i < 10; i++) {\n            const x1 = Math.random() * textureSize;\n            const y1 = Math.random() * textureSize;\n            const x2 = x1 + (Math.random() * 200 - 100);\n            const y2 = y1 + (Math.random() * 200 - 100);\n            const lineWidth = 1 + Math.random() * 3;\n            \n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.strokeStyle = `rgba(90, 60, 40, ${0.05 + Math.random() * 0.1})`;\n            ctx.lineWidth = lineWidth;\n            ctx.stroke();\n        }\n        \n        // Add small stains/discolorations\n        for (let i = 0; i < 20; i++) {\n            const x = Math.random() * textureSize;\n            const y = Math.random() * textureSize;\n            const radius = 5 + Math.random() * 20;\n            \n            const stainGradient = ctx.createRadialGradient(\n                x, y, 0,\n                x, y, radius\n            );\n            \n            const opacity = 0.03 + Math.random() * 0.08;\n            const colorVariation = Math.random();\n            \n            // Vary stain colors between darker brown and slight yellow/orange\n            if (colorVariation < 0.7) {\n                stainGradient.addColorStop(0, `rgba(80, 50, 30, ${opacity})`);\n                stainGradient.addColorStop(1, `rgba(80, 50, 30, 0)`);\n            } else {\n                stainGradient.addColorStop(0, `rgba(190, 160, 100, ${opacity})`);\n                stainGradient.addColorStop(1, `rgba(190, 160, 100, 0)`);\n            }\n            \n            ctx.fillStyle = stainGradient;\n            ctx.beginPath();\n            ctx.arc(x, y, radius, 0, Math.PI * 2);\n            ctx.fill();\n        }\n        \n        // Add vertical crease lines (paper bag typically has these)\n        for (let i = 1; i < 3; i++) {\n            const x = textureSize * (i / 3);\n            \n            ctx.beginPath();\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, textureSize);\n            ctx.strokeStyle = 'rgba(90, 60, 40, 0.15)';\n            ctx.lineWidth = 3;\n            ctx.stroke();\n            \n            // Add highlight along edge of crease\n            ctx.beginPath();\n            ctx.moveTo(x + 3, 0);\n            ctx.lineTo(x + 3, textureSize);\n            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n            ctx.lineWidth = 2;\n            ctx.stroke();\n        }\n        \n        // Add horizontal fold marks at top and bottom\n        const y1 = textureSize * 0.15;\n        const y2 = textureSize * 0.85;\n        \n        ctx.beginPath();\n        ctx.moveTo(0, y1);\n        ctx.lineTo(textureSize, y1);\n        ctx.strokeStyle = 'rgba(90, 60, 40, 0.2)';\n        ctx.lineWidth = 4;\n        ctx.stroke();\n        \n        ctx.beginPath();\n        ctx.moveTo(0, y2);\n        ctx.lineTo(textureSize, y2);\n        ctx.strokeStyle = 'rgba(90, 60, 40, 0.2)';\n        ctx.lineWidth = 4;\n        ctx.stroke();\n        \n        // Create the final texture\n        this.paperTexture = new THREE.CanvasTexture(canvas);\n        this.paperTexture.wrapS = THREE.RepeatWrapping;\n        this.paperTexture.wrapT = THREE.RepeatWrapping;\n    }\n    \n    /**\n     * Create all the procedural textures used for fruits\n     */\n    createProceduralTextures() {\n        // Orange texture\n        const orangeTextureSize = 512;\n        const orangeCanvas = document.createElement('canvas');\n        orangeCanvas.width = orangeTextureSize;\n        orangeCanvas.height = orangeTextureSize;\n        const orangeCtx = orangeCanvas.getContext('2d');\n        \n        // Create base gradient for more realistic coloring\n        const orangeGradient = orangeCtx.createRadialGradient(\n            orangeTextureSize/2, orangeTextureSize/2, 0,\n            orangeTextureSize/2, orangeTextureSize/2, orangeTextureSize/2\n        );\n        orangeGradient.addColorStop(0, '#FFAA20'); // Brighter in center\n        orangeGradient.addColorStop(0.7, '#FF8C00'); // Standard orange\n        orangeGradient.addColorStop(1, '#E67300'); // Darker at edges\n        \n        // Fill with gradient\n        orangeCtx.fillStyle = orangeGradient;\n        orangeCtx.fillRect(0, 0, orangeTextureSize, orangeTextureSize);\n        \n        // Add subtle noise texture\n        const orangeImageData = orangeCtx.getImageData(0, 0, orangeTextureSize, orangeTextureSize);\n        const orangeData = orangeImageData.data;\n        \n        for (let i = 0; i < orangeData.length; i += 4) {\n            const noise = Math.random() * 15 - 5;\n            orangeData[i] = Math.max(0, Math.min(255, orangeData[i] + noise));     // R\n            orangeData[i + 1] = Math.max(0, Math.min(255, orangeData[i + 1] + noise)); // G\n            orangeData[i + 2] = Math.max(0, Math.min(255, orangeData[i + 2] + noise)); // B\n        }\n        \n        orangeCtx.putImageData(orangeImageData, 0, 0);\n        \n        this.orangeTexture = new THREE.CanvasTexture(orangeCanvas);\n        this.orangeTexture.wrapS = THREE.RepeatWrapping;\n        this.orangeTexture.wrapT = THREE.RepeatWrapping;\n\n        // Strawberry seed texture\n        const strawberryTextureSize = 512;\n        const strawberryCanvas = document.createElement('canvas');\n        strawberryCanvas.width = strawberryTextureSize;\n        strawberryCanvas.height = strawberryTextureSize;\n        const strawberryCtx = strawberryCanvas.getContext('2d');\n        \n        // Create gradient for more realistic coloring\n        const gradient = strawberryCtx.createRadialGradient(\n            strawberryTextureSize/2, strawberryTextureSize/2, 0,\n            strawberryTextureSize/2, strawberryTextureSize/2, strawberryTextureSize/2\n        );\n        gradient.addColorStop(0, '#FF4070'); // Brighter, more vibrant red in center\n        gradient.addColorStop(0.5, '#FF2052'); // Standard strawberry red\n        gradient.addColorStop(0.85, '#E01040'); // Darker red toward edges\n        gradient.addColorStop(1, '#C00030'); // Deep red at very edge for better depth\n        \n        // Fill with gradient\n        strawberryCtx.fillStyle = gradient;\n        strawberryCtx.fillRect(0, 0, strawberryTextureSize, strawberryTextureSize);\n        \n        // Add subtle noise texture for more organic look\n        const imageData = strawberryCtx.getImageData(0, 0, strawberryTextureSize, strawberryTextureSize);\n        const data = imageData.data;\n        \n        for (let i = 0; i < data.length; i += 4) {\n            const noise = Math.random() * 20 - 7; // Increased variation for more texture\n            data[i] = Math.max(0, Math.min(255, data[i] + noise));     // R\n            data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + noise * 0.6)); // G - less effect on green\n            data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + noise * 0.4)); // B - even less on blue\n        }\n        \n        strawberryCtx.putImageData(imageData, 0, 0);\n        \n        this.strawberryTexture = new THREE.CanvasTexture(strawberryCanvas);\n        this.strawberryTexture.wrapS = THREE.RepeatWrapping;\n        this.strawberryTexture.wrapT = THREE.RepeatWrapping;\n\n        // Realistic watermelon texture with proper stripes\n        const watermelonTextureSize = 512;\n        const watermelonCanvas = document.createElement('canvas');\n        watermelonCanvas.width = watermelonTextureSize;\n        watermelonCanvas.height = watermelonTextureSize;\n        const watermelonCtx = watermelonCanvas.getContext('2d');\n        \n        // Base dark green color\n        const baseGreen = '#006400'; // Dark green\n        watermelonCtx.fillStyle = baseGreen;\n        watermelonCtx.fillRect(0, 0, watermelonTextureSize, watermelonTextureSize);\n\n        // Create radial coordinates for consistent stripe patterns\n        for (let y = 0; y < watermelonTextureSize; y++) {\n            for (let x = 0; x < watermelonTextureSize; x++) {\n                // Calculate position relative to center\n                const xRel = x - watermelonTextureSize/2;\n                const yRel = y - watermelonTextureSize/2;\n                \n                // Calculate angle and distance for radial pattern\n                const angle = Math.atan2(yRel, xRel);\n                const dist = Math.sqrt(xRel*xRel + yRel*yRel) / (watermelonTextureSize/2);\n                \n                // Skip pixels outside the circle\n                if (dist > 1) continue;\n                \n                // Create stripe pattern (8 stripes)\n                const stripeFrequency = 8;\n                const stripeWidth = 0.5; // Width of light green stripes (0-1)\n                \n                // Use angle to create vertical stripe pattern\n                const stripeValue = (Math.sin(angle * stripeFrequency) + 1) / 2; // 0-1\n                \n                // Determine if we're in a light or dark stripe area\n                if (stripeValue > (1 - stripeWidth)) {\n                    // Light green stripe\n                    watermelonCtx.fillStyle = '#32CD32'; // Lime green\n                    watermelonCtx.fillRect(x, y, 1, 1);\n                } else {\n                    // Dark green stripe\n                    watermelonCtx.fillStyle = '#004200'; // Very dark green\n                    watermelonCtx.fillRect(x, y, 1, 1);\n                }\n            }\n        }\n        \n        this.watermelonTexture = new THREE.CanvasTexture(watermelonCanvas);\n        this.watermelonTexture.wrapS = THREE.RepeatWrapping;\n        this.watermelonTexture.wrapT = THREE.RepeatWrapping;\n\n        // Grape texture with more realistic coloring and surface details\n        const grapeTextureSize = 512;\n        const grapeCanvas = document.createElement('canvas');\n        grapeCanvas.width = grapeTextureSize;\n        grapeCanvas.height = grapeTextureSize;\n        const grapeCtx = grapeCanvas.getContext('2d');\n        \n        // Base gradient for grape coloring\n        const baseGrape = grapeCtx.createRadialGradient(\n            grapeTextureSize/2, grapeTextureSize/2, 0,\n            grapeTextureSize/2, grapeTextureSize/2, grapeTextureSize/2\n        );\n        baseGrape.addColorStop(0, '#9040F0');\n        baseGrape.addColorStop(0.5, '#8030E0'); // Standard grape purple\n        baseGrape.addColorStop(1, '#6020C0');\n\n        grapeCtx.fillStyle = baseGrape;\n        grapeCtx.fillRect(0, 0, grapeTextureSize, grapeTextureSize);\n\n        // Add noise to the texture\n        const grapeImageData = grapeCtx.getImageData(0, 0, grapeTextureSize, grapeTextureSize);\n        const grapeData = grapeImageData.data;\n\n        for (let i = 0; i < grapeData.length; i += 4) {\n            const noise = (Math.random() - 0.5) * 30;\n            grapeData[i] = Math.max(0, Math.min(255, grapeData[i] + noise));     // R\n            grapeData[i + 1] = Math.max(0, Math.min(255, grapeData[i + 1] + noise)); // G\n            grapeData[i + 2] = Math.max(0, Math.min(255, grapeData[i + 2] + noise)); // B\n        }\n\n        grapeCtx.putImageData(grapeImageData, 0, 0);\n\n        this.grapeTexture = new THREE.CanvasTexture(grapeCanvas);\n        this.grapeTexture.wrapS = THREE.RepeatWrapping;\n        this.grapeTexture.wrapT = THREE.RepeatWrapping;\n\n        // Create alternate grape texture with face\n        const altGrapeCanvas = document.createElement('canvas');\n        altGrapeCanvas.width = grapeTextureSize;\n        altGrapeCanvas.height = grapeTextureSize;\n        const altGrapeCtx = altGrapeCanvas.getContext('2d');\n\n        // Copy base grape texture\n        altGrapeCtx.drawImage(grapeCanvas, 0, 0);\n\n        // Scale down the face features - make them much smaller relative to grape size\n        const centerX = grapeTextureSize * 0.5;\n        const centerY = grapeTextureSize * 0.5; // Center vertically\n        \n        // Eyes - moved slightly higher\n        const eyeSize = grapeTextureSize * 0.035;\n        const eyeSpacing = grapeTextureSize * 0.08;\n        const eyeY = centerY - grapeTextureSize * 0.03; // Moved eyes up\n        const leftEyeX = centerX - eyeSpacing;\n        const rightEyeX = centerX + eyeSpacing;\n        \n        // Draw eyes with white highlights\n        altGrapeCtx.fillStyle = 'black';\n        altGrapeCtx.beginPath();\n        altGrapeCtx.arc(leftEyeX, eyeY, eyeSize, 0, Math.PI * 2);\n        altGrapeCtx.arc(rightEyeX, eyeY, eyeSize, 0, Math.PI * 2);\n        altGrapeCtx.fill();\n\n        // White highlight in eyes\n        altGrapeCtx.fillStyle = 'white';\n        altGrapeCtx.beginPath();\n        altGrapeCtx.arc(leftEyeX - eyeSize * 0.2, eyeY - eyeSize * 0.2, eyeSize * 0.5, 0, Math.PI * 2);\n        altGrapeCtx.arc(rightEyeX - eyeSize * 0.2, eyeY - eyeSize * 0.2, eyeSize * 0.5, 0, Math.PI * 2);\n        altGrapeCtx.fill();\n\n        // Nose - centered between eyes and mouth\n        altGrapeCtx.fillStyle = 'rgba(0,0,0,0.8)';\n        const noseWidth = eyeSize * 0.8;\n        const noseHeight = eyeSize * 1.2;\n        const noseY = centerY + grapeTextureSize * 0.01; // Adjusted nose position\n        altGrapeCtx.beginPath();\n        altGrapeCtx.ellipse(centerX, noseY, noseWidth, noseHeight, 0, 0, Math.PI * 2);\n        altGrapeCtx.fill();\n\n        // Subtle smile - moved lower\n        altGrapeCtx.strokeStyle = 'rgba(0,0,0,0.6)';\n        altGrapeCtx.lineWidth = eyeSize * 0.3;\n        altGrapeCtx.lineCap = 'round';\n        \n        // Draw subtle curves on each side of the face\n        const smileY = centerY + grapeTextureSize * 0.06; // Moved smile down\n        const curveLength = grapeTextureSize * 0.04;\n        \n        // Left smile curve\n        altGrapeCtx.beginPath();\n        altGrapeCtx.moveTo(centerX - curveLength * 1.2, smileY);\n        altGrapeCtx.quadraticCurveTo(\n            centerX - curveLength * 0.6, \n            smileY + curveLength * 0.3,\n            centerX - curveLength * 0.3, \n            smileY\n        );\n        altGrapeCtx.stroke();\n        \n        // Right smile curve\n        altGrapeCtx.beginPath();\n        altGrapeCtx.moveTo(centerX + curveLength * 1.2, smileY);\n        altGrapeCtx.quadraticCurveTo(\n            centerX + curveLength * 0.6,\n            smileY + curveLength * 0.3,\n            centerX + curveLength * 0.3,\n            smileY\n        );\n        altGrapeCtx.stroke();\n\n        this.grapeAltTexture = new THREE.CanvasTexture(altGrapeCanvas);\n        this.grapeAltTexture.center.set(0.5, 0.5);\n        this.grapeAltTexture.rotation = Math.PI; // Rotate texture 180 degrees to face front\n        this.grapeAltTexture.wrapS = THREE.RepeatWrapping;\n        this.grapeAltTexture.wrapT = THREE.RepeatWrapping;\n\n        // Create peach texture with redder colors and subtle fuzz\n        const peachTextureSize = 512;\n        const peachCanvas = document.createElement('canvas');\n        peachCanvas.width = peachTextureSize;\n        peachCanvas.height = peachTextureSize;\n        const peachCtx = peachCanvas.getContext('2d');\n\n        // Fill with deep orange-red base\n        peachCtx.fillStyle = '#FF3300';  // Deeper orange-red base\n        peachCtx.fillRect(0, 0, peachTextureSize, peachTextureSize);\n\n        // Add rich gradient overlay\n        const peachGradient = peachCtx.createRadialGradient(\n            peachTextureSize * 0.5, peachTextureSize * 0.5, 0,  // Center\n            peachTextureSize * 0.5, peachTextureSize * 0.5, peachTextureSize * 0.8\n        );\n        peachGradient.addColorStop(0, 'rgba(255, 99, 71, 0.95)');     // Tomato red\n        peachGradient.addColorStop(0.3, 'rgba(255, 69, 0, 0.9)');     // Red-orange\n        peachGradient.addColorStop(0.6, 'rgba(255, 45, 0, 0.85)');    // Deeper red-orange\n        peachGradient.addColorStop(1, 'rgba(215, 40, 0, 0.8)');       // Dark red-orange\n\n        peachCtx.fillStyle = peachGradient;\n        peachCtx.fillRect(0, 0, peachTextureSize, peachTextureSize);\n\n        // Add very subtle fuzz texture\n        for (let i = 0; i < 3000; i++) {\n            const x = Math.random() * peachTextureSize;\n            const y = Math.random() * peachTextureSize;\n            const size = 0.2 + Math.random() * 0.4; // Very small dots\n\n            peachCtx.beginPath();\n            peachCtx.arc(x, y, size, 0, Math.PI * 2);\n            \n            // Extremely subtle fuzz with warmer red colors\n            const alpha = 0.01 + Math.random() * 0.02; // Very low alpha\n            if (Math.random() > 0.7) {\n                peachCtx.fillStyle = `rgba(255, 160, 120, ${alpha})`; // Light warm red fuzz\n            } else {\n                peachCtx.fillStyle = `rgba(255, 80, 40, ${alpha})`; // Red-orange fuzz\n            }\n            peachCtx.fill();\n        }\n\n        this.peachTexture = new THREE.CanvasTexture(peachCanvas);\n        this.peachTexture.wrapS = THREE.RepeatWrapping;\n        this.peachTexture.wrapT = THREE.RepeatWrapping;\n\n        // Apple texture with subtle pattern\n        const appleTextureSize = 512;\n        const appleCanvas = document.createElement('canvas');\n        appleCanvas.width = appleTextureSize;\n        appleCanvas.height = appleTextureSize;\n        const appleCtx = appleCanvas.getContext('2d');\n        \n        // Base color\n        appleCtx.fillStyle = '#FF0000';\n        appleCtx.fillRect(0, 0, appleTextureSize, appleTextureSize);\n        \n        // Add subtle variations\n        for (let i = 0; i < 1000; i++) {\n            const x = Math.random() * appleTextureSize;\n            const y = Math.random() * appleTextureSize;\n            const radius = 5 + Math.random() * 10;\n            \n            appleCtx.beginPath();\n            appleCtx.arc(x, y, radius, 0, Math.PI * 2);\n            appleCtx.fillStyle = `rgba(200, 0, 0, ${Math.random() * 0.3})`;\n            appleCtx.fill();\n        }\n        \n        this.appleTexture = new THREE.CanvasTexture(appleCanvas);\n        this.appleTexture.wrapS = THREE.RepeatWrapping;\n        this.appleTexture.wrapT = THREE.RepeatWrapping;\n\n        // Pear texture with speckles\n        const pearTextureSize = 512;\n        const pearCanvas = document.createElement('canvas');\n        pearCanvas.width = pearTextureSize;\n        pearCanvas.height = pearTextureSize;\n        const pearCtx = pearCanvas.getContext('2d');\n        \n        pearCtx.fillStyle = '#FFD700';\n        pearCtx.fillRect(0, 0, pearTextureSize, pearTextureSize);\n        \n        // Add brown speckles\n        for (let i = 0; i < 2000; i++) {\n            const x = Math.random() * pearTextureSize;\n            const y = Math.random() * pearTextureSize;\n            \n            pearCtx.beginPath();\n            pearCtx.arc(x, y, 1, 0, Math.PI * 2);\n            pearCtx.fillStyle = `rgba(139, 69, 19, ${Math.random() * 0.3})`;\n            pearCtx.fill();\n        }\n        \n        this.pearTexture = new THREE.CanvasTexture(pearCanvas);\n        this.pearTexture.wrapS = THREE.RepeatWrapping;\n        this.pearTexture.wrapT = THREE.RepeatWrapping;\n\n        // Pumpkin texture with ridges and texture\n        const pumpkinTextureSize = 512;\n        const pumpkinCanvas = document.createElement('canvas');\n        pumpkinCanvas.width = pumpkinTextureSize;\n        pumpkinCanvas.height = pumpkinTextureSize;\n        const pumpkinCtx = pumpkinCanvas.getContext('2d');\n        \n        // Base orange color\n        pumpkinCtx.fillStyle = '#FF7518';\n        pumpkinCtx.fillRect(0, 0, pumpkinTextureSize, pumpkinTextureSize);\n        \n        // Add ridge lines\n        for (let i = 0; i < 8; i++) {\n            const posX = pumpkinTextureSize / 8 + (i * pumpkinTextureSize / 8);\n            \n            // Draw vertical ridge\n            pumpkinCtx.beginPath();\n            pumpkinCtx.moveTo(posX, 0);\n            pumpkinCtx.lineTo(posX, pumpkinTextureSize);\n            pumpkinCtx.lineWidth = 10;\n            pumpkinCtx.strokeStyle = '#E86100';\n            pumpkinCtx.stroke();\n        }\n        \n        // Add subtle texture variations\n        for (let i = 0; i < 3000; i++) {\n            const x = Math.random() * pumpkinTextureSize;\n            const y = Math.random() * pumpkinTextureSize;\n            const radius = 1 + Math.random() * 2;\n            \n            pumpkinCtx.beginPath();\n            pumpkinCtx.arc(x, y, radius, 0, Math.PI * 2);\n            pumpkinCtx.fillStyle = `rgba(255, 138, 36, ${Math.random() * 0.3})`;\n            pumpkinCtx.fill();\n        }\n        \n        this.pumpkinTexture = new THREE.CanvasTexture(pumpkinCanvas);\n        this.pumpkinTexture.wrapS = THREE.RepeatWrapping;\n        this.pumpkinTexture.wrapT = THREE.RepeatWrapping;\n\n        // Create melon (cantaloupe) texture with realistic netting pattern\n        const melonTextureSize = 512;\n        const melonCanvas = document.createElement('canvas');\n        melonCanvas.width = melonTextureSize;\n        melonCanvas.height = melonTextureSize;\n        const melonCtx = melonCanvas.getContext('2d');\n\n        // Base color - pale yellow-green\n        const baseColor = '#F4E5C3';\n        melonCtx.fillStyle = baseColor;\n        melonCtx.fillRect(0, 0, melonTextureSize, melonTextureSize);\n\n        // Add subtle color variations for more natural look\n        const melonImageData = melonCtx.getImageData(0, 0, melonTextureSize, melonTextureSize);\n        const melonPixels = melonImageData.data;\n        for (let i = 0; i < melonPixels.length; i += 4) {\n            const noise = Math.random() * 15 - 7;\n            melonPixels[i] = Math.max(0, Math.min(255, melonPixels[i] + noise));     // R\n            melonPixels[i + 1] = Math.max(0, Math.min(255, melonPixels[i + 1] + noise * 0.8)); // G\n            melonPixels[i + 2] = Math.max(0, Math.min(255, melonPixels[i + 2] + noise * 0.6)); // B\n        }\n        melonCtx.putImageData(melonImageData, 0, 0);\n\n        // Create netting pattern\n        for (let i = 0; i < 2000; i++) {\n            const x = Math.random() * melonTextureSize;\n            const y = Math.random() * melonTextureSize;\n            const length = 10 + Math.random() * 20;\n            const angle = Math.random() * Math.PI * 2;\n            \n            // Draw raised netting lines\n            melonCtx.beginPath();\n            melonCtx.moveTo(x, y);\n            melonCtx.lineTo(\n                x + Math.cos(angle) * length,\n                y + Math.sin(angle) * length\n            );\n            \n            // Vary line width for more natural look\n            melonCtx.lineWidth = 1 + Math.random() * 2;\n            \n            // Create raised effect with light and shadow\n            // Light edge\n            melonCtx.strokeStyle = 'rgba(255, 245, 220, 0.4)';\n            melonCtx.stroke();\n            \n            // Dark edge for depth\n            melonCtx.beginPath();\n            melonCtx.moveTo(x + 1, y + 1);\n            melonCtx.lineTo(\n                x + Math.cos(angle) * length + 1,\n                y + Math.sin(angle) * length + 1\n            );\n            melonCtx.strokeStyle = 'rgba(150, 140, 110, 0.4)';\n            melonCtx.stroke();\n        }\n\n        this.melonTexture = new THREE.CanvasTexture(melonCanvas);\n        this.melonTexture.wrapS = THREE.RepeatWrapping;\n        this.melonTexture.wrapT = THREE.RepeatWrapping;\n    }\n    \n    /**\n     * Create and load a texture from a data URL\n     * @param {string} dataUrl - Base64 encoded data URL\n     * @returns {THREE.Texture} The created texture\n     */\n    loadTextureFromDataUrl(dataUrl) {\n        return new THREE.TextureLoader().load(dataUrl);\n    }\n}\n","/**\n * ScoreManager handles tracking, saving, and loading high scores\n * It uses localStorage to persist scores between play sessions\n */\nexport class ScoreManager {\n    constructor() {\n        this.currentScore = 0;\n        this.highScore = this.loadHighScore();\n        this.scoreElement = document.getElementById('score');\n        this.highScoreElement = null;\n        \n        // Create high score display element if it doesn't exist\n        this.initHighScoreDisplay();\n    }\n    \n    /**\n     * Initialize the high score display element\n     */\n    initHighScoreDisplay() {\n        // Check if high score element already exists\n        this.highScoreElement = document.getElementById('high-score');\n        \n        if (!this.highScoreElement) {\n            // Create the high score element if it doesn't exist\n            this.highScoreElement = document.createElement('div');\n            this.highScoreElement.id = 'high-score';\n            this.highScoreElement.style.position = 'absolute';\n            this.highScoreElement.style.top = '50px';\n            this.highScoreElement.style.left = '20px';\n            this.highScoreElement.style.color = 'white';\n            this.highScoreElement.style.fontFamily = 'Arial, sans-serif';\n            this.highScoreElement.style.fontSize = '18px';\n            document.body.appendChild(this.highScoreElement);\n        }\n        \n        // Update the high score display\n        this.updateHighScoreDisplay();\n    }\n    \n    /**\n     * Load the high score from localStorage\n     * @returns {number} The saved high score or 0 if no high score exists\n     */\n    loadHighScore() {\n        const savedHighScore = localStorage.getItem('suikaHighScore');\n        return savedHighScore ? parseInt(savedHighScore) : 0;\n    }\n    \n    /**\n     * Save the high score to localStorage\n     * @param {number} score - The high score to save\n     */\n    saveHighScore(score) {\n        localStorage.setItem('suikaHighScore', score.toString());\n    }\n    \n    /**\n     * Update the current score and check if it's a new high score\n     * @param {number} score - The new score\n     * @returns {boolean} True if this is a new high score\n     */\n    updateScore(score) {\n        this.currentScore = score;\n        \n        // Update the score display\n        this.updateScoreDisplay();\n        \n        // Check if this is a new high score\n        if (score > this.highScore) {\n            this.highScore = score;\n            this.saveHighScore(score);\n            this.updateHighScoreDisplay();\n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Add points to the current score\n     * @param {number} points - Points to add\n     * @returns {boolean} True if this resulted in a new high score\n     */\n    addPoints(points) {\n        return this.updateScore(this.currentScore + points);\n    }\n    \n    /**\n     * Get the current high score\n     * @returns {number} The current high score\n     */\n    getHighScore() {\n        return this.highScore;\n    }\n    \n    /**\n     * Get the current score\n     * @returns {number} The current score\n     */\n    getCurrentScore() {\n        return this.currentScore;\n    }\n    \n    /**\n     * Set the high score directly\n     * @param {number} score - The high score to set\n     */\n    setHighScore(score) {\n        this.highScore = score;\n        this.saveHighScore(score);\n        this.updateHighScoreDisplay();\n    }\n    \n    /**\n     * Reset the current score to 0\n     */\n    resetCurrentScore() {\n        this.updateScore(0);\n    }\n    \n    /**\n     * Update the score display\n     */\n    updateScoreDisplay() {\n        if (this.scoreElement) {\n            this.scoreElement.textContent = `Score: ${this.currentScore}`;\n        }\n    }\n    \n    /**\n     * Update the high score display\n     */\n    updateHighScoreDisplay() {\n        if (this.highScoreElement) {\n            this.highScoreElement.textContent = `High Score: ${this.highScore}`;\n        }\n    }\n    \n    /**\n     * Reset high score to 0 (mainly for testing)\n     */\n    clearHighScore() {\n        this.highScore = 0;\n        this.saveHighScore(0);\n        this.updateHighScoreDisplay();\n    }\n}\n","// particleSystem.js\nimport * as THREE from 'three';\n\nexport class ParticleTrailSystem {\n    constructor(scene) {\n        this.scene = scene;\n        this.particles = new Map(); // Map of fruit meshes to their particle systems\n        this.starGeometry = this.createStarGeometry();\n    }\n\n    createStarGeometry() {\n        const starPoints = [];\n        const outerRadius = 0.15;\n        const innerRadius = 0.05;\n        const numPoints = 5;\n\n        for (let i = 0; i < numPoints * 2; i++) {\n            const radius = i % 2 === 0 ? outerRadius : innerRadius;\n            const angle = (i / (numPoints * 2)) * Math.PI * 2;\n            starPoints.push(new THREE.Vector2(\n                Math.cos(angle) * radius,\n                Math.sin(angle) * radius\n            ));\n        }\n\n        const starShape = new THREE.Shape(starPoints);\n        return new THREE.ShapeGeometry(starShape);\n    }\n\n    createParticleSystem(fruit, color) {\n        const maxParticles = 20;\n        const particles = new THREE.Group();\n        \n        // Create pool of star particles\n        for (let i = 0; i < maxParticles; i++) {\n            const particle = new THREE.Mesh(\n                this.starGeometry,\n                new THREE.MeshBasicMaterial({\n                    color: color,\n                    transparent: true,\n                    opacity: 0,\n                    side: THREE.DoubleSide\n                })\n            );\n            particle.rotation.z = Math.random() * Math.PI * 2;\n            particle.visible = false;\n            particles.add(particle);\n        }\n\n        this.scene.add(particles);\n        this.particles.set(fruit, {\n            group: particles,\n            lastPosition: fruit.position.clone(),\n            nextParticleIndex: 0,\n            updateCounter: 0\n        });\n    }\n\n    removeParticleSystem(fruit) {\n        const system = this.particles.get(fruit);\n        if (system) {\n            this.scene.remove(system.group);\n            this.particles.delete(fruit);\n        }\n    }\n\n    update() {\n        this.particles.forEach((system, fruit) => {\n            // Only emit particles when the fruit has moved\n            const movement = fruit.position.distanceTo(system.lastPosition);\n            \n            if (movement > 0.05) {\n                system.updateCounter++;\n                \n                // Emit new particle every few frames when moving\n                if (system.updateCounter % 2 === 0) {\n                    const particle = system.group.children[system.nextParticleIndex];\n                    \n                    // Reset particle\n                    particle.position.copy(fruit.position);\n                    particle.material.opacity = 0.8;\n                    particle.scale.set(1, 1, 1);\n                    particle.visible = true;\n                    \n                    // Update next particle index\n                    system.nextParticleIndex = (system.nextParticleIndex + 1) % system.group.children.length;\n                }\n                \n                system.lastPosition.copy(fruit.position);\n            }\n\n            // Update existing particles\n            system.group.children.forEach(particle => {\n                if (particle.visible) {\n                    particle.material.opacity *= 0.95;\n                    particle.scale.multiplyScalar(0.95);\n                    \n                    if (particle.material.opacity < 0.1) {\n                        particle.visible = false;\n                    }\n                }\n            });\n        });\n    }\n}\n","// fruitFactory.js\n// Contains methods for creating fruit geometries and physics bodies\n\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon-es';\nimport { ParticleTrailSystem } from './particleSystem.js';\n\nexport class FruitFactory {\n    constructor(world, fruitMaterial, textureManager, scene) {\n        this.world = world;\n        this.fruitMaterial = fruitMaterial;\n        this.textureManager = textureManager;\n        this.scene = scene;\n        this.particleSystem = new ParticleTrailSystem(scene);\n    }\n\n    createFruitGeometry(type) {\n        switch (type.shape) {\n            case 'cherry': {\n                const group = new THREE.Group();\n                \n                // Cherry sphere\n                const cherry = new THREE.Mesh(\n                    new THREE.SphereGeometry(type.radius),\n                    new THREE.MeshPhongMaterial({ \n                        color: type.color,\n                        shininess: 100,\n                        specular: 0x444444\n                    })\n                );\n                group.add(cherry);\n                \n                // Stem\n                const stem = new THREE.Mesh(\n                    new THREE.CylinderGeometry(0.05, 0.05, type.radius * 1.5, 8),\n                    new THREE.MeshPhongMaterial({ color: type.stemColor })\n                );\n                stem.position.y = type.radius * 0.8;\n                stem.rotation.x = Math.PI / 6;\n                group.add(stem);\n                \n                return group;\n            }\n            \n            case 'strawberry': {\n                const group = new THREE.Group();\n                \n                // Main body - conical sphere with more realistic shape\n                const bodyGeometry = new THREE.SphereGeometry(type.radius, 32, 32);\n                \n                // Make it more conical and strawberry-shaped\n                const positions = bodyGeometry.attributes.position.array;\n                for (let i = 0; i < positions.length; i += 3) {\n                    const y = positions[i + 1];\n                    \n                    // Bottom half - make more tapered\n                    if (y < 0) {\n                        // Get more tapered toward the bottom\n                        const factor = 0.8 + (y / type.radius) * 0.2; // Gradually taper from 0.8 to 1.0\n                        positions[i] *= factor;     // x\n                        positions[i + 2] *= factor; // z\n                    }\n                    \n                    // Top - make slightly flatter\n                    if (y > type.radius * 0.5) {\n                        positions[i + 1] *= 0.9; // Slightly flatten the top\n                    }\n                    \n                    // Add small bumps for seeds all over surface\n                    const x = positions[i];\n                    const z = positions[i + 2];\n                    const distFromCenter = Math.sqrt(x*x + z*z) / type.radius;\n                    \n                    // Only add bumps within certain radius\n                    if (distFromCenter > 0.5 && distFromCenter < 0.95) {\n                        // Create small bumps all over surface to simulate seed texture\n                        const angle = Math.atan2(z, x);\n                        const bumpAmount = 0.03 * Math.sin(angle * 38) * Math.sin(y * 40);\n                        \n                        positions[i] += positions[i] * bumpAmount;     // x\n                        positions[i + 2] += positions[i + 2] * bumpAmount; // z\n                    }\n                }\n                bodyGeometry.attributes.position.needsUpdate = true;\n                bodyGeometry.computeVertexNormals(); // Recalculate normals for proper lighting\n                \n                // Create material with enhanced properties\n                const bodyMaterial = new THREE.MeshStandardMaterial({ \n                    color: type.color,\n                    roughness: 0.7,\n                    metalness: 0.1,\n                    map: this.textureManager.strawberryTexture,\n                    bumpMap: this.textureManager.strawberryTexture,\n                    bumpScale: 0.04,\n                    normalMap: this.textureManager.strawberryTexture,\n                    normalScale: new THREE.Vector2(0.05, 0.05),\n                    envMapIntensity: 0.8,\n                });\n                \n                const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n                group.add(body);\n                \n                // More detailed leaves\n                const leafGroup = new THREE.Group();\n                \n                // Create multiple leaf petals\n                for (let i = 0; i < 5; i++) {\n                    const leafShape = new THREE.Shape();\n                    const leafWidth = type.radius * (0.25 + Math.random() * 0.1);\n                    const leafLength = type.radius * (0.3 + Math.random() * 0.1);\n                    \n                    // Create leaf shape\n                    leafShape.moveTo(0, 0);\n                    leafShape.quadraticCurveTo(leafWidth/2, leafLength/2, leafWidth, 0);\n                    leafShape.quadraticCurveTo(leafWidth/2, -leafLength/6, 0, 0);\n                    \n                    // Create geometry and mesh\n                    const leafGeometry = new THREE.ShapeGeometry(leafShape);\n                    const leaf = new THREE.Mesh(\n                        leafGeometry,\n                        new THREE.MeshPhongMaterial({ \n                            color: type.leafColor,\n                            shininess: 10,\n                            side: THREE.DoubleSide\n                        })\n                    );\n                    \n                    // Position and rotate leaf\n                    leaf.rotation.x = Math.PI / 2 - Math.random() * 0.3;\n                    leaf.rotation.z = (i / 5) * Math.PI * 2;\n                    \n                    leafGroup.add(leaf);\n                }\n                \n                leafGroup.position.y = type.radius * 0.9;\n                group.add(leafGroup);\n                \n                // Add small stem\n                const stem = new THREE.Mesh(\n                    new THREE.CylinderGeometry(type.radius * 0.05, type.radius * 0.08, type.radius * 0.2, 8),\n                    new THREE.MeshPhongMaterial({ \n                        color: 0x7A5230,\n                        shininess: 5\n                    })\n                );\n                stem.position.y = type.radius * 0.8;\n                group.add(stem);\n                \n                return group;\n            }\n            \n            case 'apple': {\n                const group = new THREE.Group();\n                \n                // Main apple body\n                const body = new THREE.Mesh(\n                    new THREE.SphereGeometry(type.radius, 32, 32),\n                    new THREE.MeshStandardMaterial({ \n                        color: type.color,\n                        roughness: 0.7,\n                        metalness: 0.1,\n                        map: this.textureManager.appleTexture,\n                        bumpMap: this.textureManager.appleTexture,\n                        bumpScale: 0.02,\n                        normalMap: this.textureManager.appleTexture,\n                        normalScale: new THREE.Vector2(0.04, 0.04)\n                    })\n                );\n                group.add(body);\n                \n                // Small indentation at top\n                const indentationGeometry = new THREE.CylinderGeometry(\n                    type.radius * 0.12,\n                    type.radius * 0.12,\n                    type.radius * 0.1,\n                    8\n                );\n                const indentation = new THREE.Mesh(\n                    indentationGeometry,\n                    new THREE.MeshStandardMaterial({ \n                        color: 0x5A2D00,\n                        roughness: 0.9,\n                        metalness: 0\n                    })\n                );\n                indentation.position.y = type.radius * 0.92;\n                group.add(indentation);\n                \n                // Add stem\n                const stemGeometry = new THREE.CylinderGeometry(\n                    type.radius * 0.03,  // top radius (thinner at top)\n                    type.radius * 0.05,  // bottom radius\n                    type.radius * 0.3,   // height\n                    8\n                );\n                \n                // Curve the stem slightly\n                const positions = stemGeometry.attributes.position.array;\n                for (let i = 0; i < positions.length; i += 3) {\n                    const y = positions[i + 1];\n                    if (y > 0) {\n                        // Apply a slight curve to one side\n                        positions[i] += type.radius * 0.05 * (y / (type.radius * 0.3));\n                    }\n                }\n                stemGeometry.attributes.position.needsUpdate = true;\n                stemGeometry.computeVertexNormals(); \n                \n                const stem = new THREE.Mesh(\n                    stemGeometry,\n                    new THREE.MeshStandardMaterial({ \n                        color: type.stemColor || 0x4A7023,\n                        roughness: 0.9,\n                        metalness: 0.05\n                    })\n                );\n                \n                // Position and rotate stem\n                stem.position.y = type.radius * 1.05;\n                stem.rotation.x = Math.PI / 12;  // Tilt the stem slightly\n                stem.rotation.z = Math.PI / 8;   // Rotate for natural look\n                group.add(stem);\n                \n                // Add a small leaf near the stem base\n                const leafShape = new THREE.Shape();\n                const leafWidth = type.radius * 0.25;\n                const leafLength = type.radius * 0.3;\n                \n                // Create leaf shape\n                leafShape.moveTo(0, 0);\n                leafShape.quadraticCurveTo(leafWidth/3, leafLength/2, leafWidth, 0);\n                leafShape.quadraticCurveTo(leafWidth/3, -leafLength/4, 0, 0);\n                \n                const leafGeometry = new THREE.ShapeGeometry(leafShape);\n                const leaf = new THREE.Mesh(\n                    leafGeometry,\n                    new THREE.MeshStandardMaterial({ \n                        color: type.stemColor || 0x4A7023,\n                        roughness: 0.8,\n                        metalness: 0.05,\n                        side: THREE.DoubleSide\n                    })\n                );\n                \n                // Position and rotate the leaf\n                leaf.position.set(type.radius * 0.05, type.radius * 0.9, type.radius * 0.05);\n                leaf.rotation.set(Math.PI / 3, 0, Math.PI / 8);\n                group.add(leaf);\n                \n                return group;\n            }\n            \n            case 'pear': {\n                const group = new THREE.Group();\n                \n                // Custom pear shape\n                const pearGeometry = new THREE.SphereGeometry(type.radius, 32, 32);\n                // Modify to make pear-shaped\n                const positions = pearGeometry.attributes.position.array;\n                for (let i = 0; i < positions.length; i += 3) {\n                    const y = positions[i + 1];\n                    // Make bottom wider, top narrower\n                    if (y < 0) {\n                        // Bottom half - make wider\n                        const factor = 1.0 + Math.abs(y / type.radius) * 0.3;\n                        positions[i] *= factor;       // x\n                        positions[i + 2] *= factor;   // z\n                    } else if (y > 0) {\n                        // Top half - make narrower\n                        const factor = 1.0 - (y / type.radius) * 0.3;\n                        positions[i] *= factor;       // x\n                        positions[i + 2] *= factor;   // z\n                    }\n                }\n                pearGeometry.attributes.position.needsUpdate = true;\n                \n                const body = new THREE.Mesh(\n                    pearGeometry,\n                    new THREE.MeshPhongMaterial({ \n                        color: type.color,\n                        shininess: 30,\n                        map: this.textureManager.pearTexture,\n                        bumpMap: this.textureManager.pearTexture,\n                        bumpScale: 0.01\n                    })\n                );\n                group.add(body);\n                \n                // Add stem\n                const stemGeometry = new THREE.CylinderGeometry(\n                    type.radius * 0.05,\n                    type.radius * 0.05,\n                    type.radius * 0.3,\n                    8\n                );\n                const stem = new THREE.Mesh(\n                    stemGeometry,\n                    new THREE.MeshPhongMaterial({ \n                        color: 0x7A3D00\n                    })\n                );\n                stem.position.y = type.radius * 1.1;\n                group.add(stem);\n                \n                return group;\n            }\n            \n            case 'peach': {\n                const group = new THREE.Group();\n                \n                // Create a simple peach shape\n                const peachGeometry = new THREE.SphereGeometry(type.radius, 32, 32);\n                \n                // Modify vertices to create a subtle cleft\n                const peachPositions = peachGeometry.attributes.position.array;\n                for (let i = 0; i < peachPositions.length; i += 3) {\n                    const x = peachPositions[i];\n                    const y = peachPositions[i + 1]; \n                    const z = peachPositions[i + 2];\n                    \n                    // Make peach slightly wider than tall\n                    peachPositions[i] *= 1.05;     // x - wider\n                    peachPositions[i + 2] *= 1.05; // z - wider\n                    \n                    // Create a very subtle cleft - move to front (positive z)\n                    if (z > 0 && Math.abs(x) < type.radius * 0.2) {\n                        // Only apply to the front half near center\n                        const cleftDepth = 0.1;\n                        const cleftFactor = Math.exp(-Math.pow(x/(type.radius*0.15), 2));\n                        const yFactor = 1.0 - Math.pow(y/(type.radius*1.1), 2);\n                        const depthEffect = cleftDepth * cleftFactor * Math.max(0, yFactor);\n                        \n                        // Push in the z direction slightly to create cleft\n                        peachPositions[i + 2] *= (1.0 - depthEffect);\n                    }\n                }\n                \n                // Update geometry\n                peachGeometry.attributes.position.needsUpdate = true;\n                peachGeometry.computeVertexNormals();\n                \n                // Create peach material using the same approach as the orange\n                const peachMaterial = new THREE.MeshStandardMaterial({\n                    map: this.textureManager.peachTexture,\n                    roughness: 0.8,\n                    metalness: 0.0\n                });\n                \n                const body = new THREE.Mesh(peachGeometry, peachMaterial);\n                \n                // Rotate the peach body so the cleft faces forward (positive z-axis)\n                // and the stem is at the top (positive y-axis)\n                body.rotation.x = Math.PI * 0.5; // Rotate 90 degrees so stem points up\n                \n                group.add(body);\n                \n                // Add a simple stem\n                const stemGeometry = new THREE.CylinderGeometry(\n                    type.radius * 0.02,  // top\n                    type.radius * 0.04,  // bottom\n                    type.radius * 0.15,  // height\n                    8\n                );\n                \n                // Add a slight curve to the stem\n                const stemPositions = stemGeometry.attributes.position.array;\n                for (let i = 0; i < stemPositions.length; i += 3) {\n                    const y = stemPositions[i + 1];\n                    if (y > 0) {\n                        stemPositions[i] += type.radius * 0.03 * (y / (type.radius * 0.15));\n                    }\n                }\n                stemGeometry.attributes.position.needsUpdate = true;\n                stemGeometry.computeVertexNormals();\n                \n                const stem = new THREE.Mesh(\n                    stemGeometry,\n                    new THREE.MeshStandardMaterial({ \n                        color: 0x5A3300,  // Brown\n                        roughness: 0.9,\n                        metalness: 0.0\n                    })\n                );\n                \n                // Position stem at the top (positive y-axis)\n                stem.position.set(0, type.radius * 0.85, 0);\n                stem.rotation.x = Math.PI / 12;\n                \n                // Apply the same rotation to the stem as the body\n                stem.rotation.x += Math.PI * 0.5;\n                \n                group.add(stem);\n                \n                // Add a simple leaf\n                const leafShape = new THREE.Shape();\n                const leafWidth = type.radius * 0.2;\n                const leafLength = type.radius * 0.25;\n                \n                // Create leaf shape\n                leafShape.moveTo(0, 0);\n                leafShape.quadraticCurveTo(leafWidth/3, leafLength/2, leafWidth, 0);\n                leafShape.quadraticCurveTo(leafWidth/3, -leafLength/4, 0, 0);\n                \n                const leafGeometry = new THREE.ShapeGeometry(leafShape);\n                const leaf = new THREE.Mesh(\n                    leafGeometry,\n                    new THREE.MeshStandardMaterial({ \n                        color: 0x4D8A2A,  // Green\n                        roughness: 0.8,\n                        metalness: 0.0,\n                        side: THREE.DoubleSide\n                    })\n                );\n                \n                // Position the leaf near the stem\n                leaf.position.set(type.radius * 0.05, type.radius * 0.85, type.radius * 0.05);\n                leaf.rotation.set(Math.PI / 3, 0, Math.PI / 6);\n                \n                // Apply the same rotation to the leaf as the body\n                leaf.rotation.x += Math.PI * 0.5;\n                \n                group.add(leaf);\n                \n                return group;\n            }\n            \n            case 'pumpkin': {\n                const group = new THREE.Group();\n                \n                // Main pumpkin body with ridges\n                const segments = 16; // More segments for smoother appearance\n                const radius = type.radius;\n                \n                // Create pumpkin geometry with ridges\n                const pumpkinGeometry = new THREE.SphereGeometry(radius, segments, segments);\n                const pumpkinMaterial = new THREE.MeshPhongMaterial({\n                    color: type.color,\n                    shininess: 5,\n                    map: this.textureManager.pumpkinTexture,\n                    bumpMap: this.textureManager.pumpkinTexture,\n                    bumpScale: 0.05\n                });\n                \n                // Create the main pumpkin body\n                const body = new THREE.Mesh(pumpkinGeometry, pumpkinMaterial);\n                \n                // Apply subtle deformation to create the pumpkin shape\n                const pumpkinVertices = pumpkinGeometry.attributes.position;\n                for (let i = 0; i < pumpkinVertices.count; i++) {\n                    const x = pumpkinVertices.getX(i);\n                    const y = pumpkinVertices.getY(i);\n                    const z = pumpkinVertices.getZ(i);\n                    \n                    // Calculate ridges based on position\n                    const angle = Math.atan2(z, x);\n                    const ridgeOffset = Math.sin(angle * 8) * 0.08 * radius;\n                    \n                    // Apply ridge deformation\n                    const newX = x * (1 + ridgeOffset);\n                    const newZ = z * (1 + ridgeOffset);\n                    \n                    // Update vertex\n                    pumpkinVertices.setX(i, newX);\n                    pumpkinVertices.setZ(i, newZ);\n                }\n                \n                // Update geometry\n                pumpkinVertices.needsUpdate = true;\n                pumpkinGeometry.computeVertexNormals();\n                \n                group.add(body);\n                \n                // Add stem on top\n                const stemGeometry = new THREE.CylinderGeometry(0.1, 0.15, radius * 0.4, 8);\n                const stemMaterial = new THREE.MeshPhongMaterial({ \n                    color: type.stemColor,\n                    shininess: 5\n                });\n                \n                const stem = new THREE.Mesh(stemGeometry, stemMaterial);\n                stem.position.y = radius * 0.9;\n                stem.rotation.x = Math.PI * 0.05;\n                stem.rotation.z = Math.PI * 0.1;\n                group.add(stem);\n                \n                return group;\n            }\n            \n            case 'melon': {\n                const geometry = new THREE.SphereGeometry(type.radius, 32, 32);\n                const material = new THREE.MeshPhongMaterial({ \n                    color: type.color,\n                    shininess: 40,\n                    map: this.textureManager.melonTexture,\n                    bumpMap: this.textureManager.melonTexture,\n                    bumpScale: 0.02\n                });\n                return new THREE.Mesh(geometry, material);\n            }\n\n            case 'watermelon': {\n                const group = new THREE.Group();\n                \n                // Create round watermelon shape\n                const watermelonGeometry = new THREE.SphereGeometry(type.radius, 32, 32);\n                \n                // Modify vertices for a smooth, round watermelon shape\n                const positions = watermelonGeometry.attributes.position.array;\n                for (let i = 0; i < positions.length; i += 3) {\n                    // Instead of flattening, make it very slightly oval horizontally\n                    // but keep the vertical dimension unchanged for smoothness\n                    positions[i] *= 1.02;     // Make very slightly wider on x-axis\n                    positions[i + 2] *= 1.02; // Make very slightly wider on z-axis\n                    \n                    // Add extremely subtle surface variations for realism\n                    // but too small to affect the overall smooth round shape\n                    const x = positions[i];\n                    const z = positions[i + 2];\n                    \n                    // Very minimal noise that won't affect the smoothness\n                    const noiseScale = 0.005;\n                    const noise = (Math.random() - 0.5) * noiseScale;\n                    \n                    // Apply minimal noise only to the sides, not top/bottom\n                    const y = positions[i + 1];\n                    if (Math.abs(y / type.radius) < 0.7) { \n                        positions[i] += x * noise;\n                        positions[i + 2] += z * noise;\n                    }\n                }\n                \n                watermelonGeometry.attributes.position.needsUpdate = true;\n                watermelonGeometry.computeVertexNormals();\n                \n                // Use standard material with our texture for best appearance\n                const watermelonMaterial = new THREE.MeshStandardMaterial({\n                    map: this.textureManager.watermelonTexture,\n                    roughness: 0.5,\n                    metalness: 0.0,\n                    bumpScale: 0.01,\n                });\n                \n                const watermelon = new THREE.Mesh(watermelonGeometry, watermelonMaterial);\n                group.add(watermelon);\n                \n                return group;\n            }\n            \n            case 'orange': {\n                const group = new THREE.Group();\n                \n                // Create a more detailed orange with subtle bump mapping\n                const orangeGeometry = new THREE.SphereGeometry(type.radius, 32, 32);\n                \n                // Add subtle deformations to make the orange less perfectly round\n                const orangePositions = orangeGeometry.attributes.position.array;\n                for (let i = 0; i < orangePositions.length; i += 3) {\n                    const x = orangePositions[i];\n                    const y = orangePositions[i + 1];\n                    const z = orangePositions[i + 2];\n                    \n                    // Calculate distance from center\n                    const distance = Math.sqrt(x*x + y*y + z*z);\n                    \n                    // Add subtle random bumps\n                    const angle = Math.atan2(z, x);\n                    const bumpFactor = 0.02 * Math.sin(angle * 10) * Math.sin(y * 12);\n                    \n                    // Apply bumps\n                    orangePositions[i] += orangePositions[i] * bumpFactor;\n                    orangePositions[i + 1] += orangePositions[i + 1] * bumpFactor;\n                    orangePositions[i + 2] += orangePositions[i + 2] * bumpFactor;\n                    \n                    // Add a slight \"squashed\" effect on top and bottom (pole flattening)\n                    if (Math.abs(y / type.radius) > 0.8) {\n                        orangePositions[i + 1] *= 0.95;\n                    }\n                }\n                \n                orangeGeometry.attributes.position.needsUpdate = true;\n                orangeGeometry.computeVertexNormals();\n                \n                const orangeMaterial = new THREE.MeshPhongMaterial({\n                    color: type.color,\n                    shininess: 80,\n                    specular: 0x882200,\n                    map: this.textureManager.orangeTexture,\n                    bumpMap: this.textureManager.orangeTexture,\n                    bumpScale: type.bumpScale || 0.03,\n                    emissive: 0x220000,\n                    emissiveIntensity: 0.05\n                });\n                \n                const orange = new THREE.Mesh(orangeGeometry, orangeMaterial);\n                group.add(orange);\n                \n                // Add small stem/navel on top\n                const stemGroup = new THREE.Group();\n                \n                // Main stem/navel\n                const stem = new THREE.Mesh(\n                    new THREE.CylinderGeometry(type.radius * 0.05, type.radius * 0.08, type.radius * 0.06, 8),\n                    new THREE.MeshPhongMaterial({ color: 0x885522 })\n                );\n                stemGroup.add(stem);\n                \n                // Small leaf near stem\n                const leafShape = new THREE.Shape();\n                const leafSize = type.radius * 0.15;\n                \n                leafShape.moveTo(0, 0);\n                leafShape.quadraticCurveTo(leafSize * 0.5, leafSize, leafSize, 0);\n                leafShape.quadraticCurveTo(leafSize * 0.5, -leafSize * 0.3, 0, 0);\n                \n                const leaf = new THREE.Mesh(\n                    new THREE.ShapeGeometry(leafShape),\n                    new THREE.MeshPhongMaterial({ \n                        color: 0x2D5A27,\n                        side: THREE.DoubleSide\n                    })\n                );\n                leaf.rotation.set(Math.PI/2 - 0.2, 0, 0);\n                leaf.position.set(type.radius * 0.05, type.radius * 0.06, 0);\n                stemGroup.add(leaf);\n                \n                stemGroup.position.y = type.radius * 0.9;\n                stemGroup.rotation.x = Math.PI * 0.1;\n                group.add(stemGroup);\n                \n                return group;\n            }\n            \n            case 'grape': {\n                // Simple sphere with improved material properties\n                const geometry = new THREE.SphereGeometry(type.radius, 32, 32);\n                const useAltTexture = Math.random() < 0.001; // 1/1000 chance for special face\n                \n                // Create UV coordinates for front-facing texture\n                if (useAltTexture) {\n                    const uvAttribute = geometry.attributes.uv;\n                    const posAttribute = geometry.attributes.position;\n                    \n                    // Modify UVs to center the face on the front of the sphere\n                    for (let i = 0; i < uvAttribute.count; i++) {\n                        const x = posAttribute.getX(i);\n                        const y = posAttribute.getY(i);\n                        const z = posAttribute.getZ(i);\n                        \n                        // Convert from Cartesian to spherical coordinates\n                        const theta = Math.atan2(z, x);\n                        const phi = Math.acos(y / type.radius);\n                        \n                        // Map spherical coordinates to UV\n                        // Shift the texture so the face is centered on the front (z-axis)\n                        const u = 0.5 + Math.atan2(x, z) / (2 * Math.PI);\n                        const v = 1 - phi / Math.PI;\n                        \n                        uvAttribute.setXY(i, u, v);\n                    }\n                    uvAttribute.needsUpdate = true;\n                }\n                \n                const material = new THREE.MeshPhongMaterial({\n                    color: type.color,\n                    shininess: 120, // High shininess for grape's waxy appearance\n                    transparent: false,\n                    opacity: 1,\n                    map: useAltTexture ? this.textureManager.grapeAltTexture : this.textureManager.grapeTexture,\n                    bumpMap: useAltTexture ? this.textureManager.grapeAltTexture : this.textureManager.grapeTexture,\n                    bumpScale: 0.01\n                });\n                \n                return new THREE.Mesh(geometry, material);\n            }\n            \n            default: {\n                // Basic sphere for any other fruits\n                const geometry = new THREE.SphereGeometry(type.radius, 32, 32);\n                const material = new THREE.MeshPhongMaterial({ color: type.color });\n                return new THREE.Mesh(geometry, material);\n            }\n        }\n    }\n\n    createFruitBody(type, position = { x: 0, y: 0 }, isCurrent = false) {\n        const radius = type.radius;\n        let shape, body;\n\n        // Special handling for watermelon to match its oval shape\n        if (type.shape === 'watermelon') {\n            // Create an ellipsoid shape that matches the visual mesh\n            // Scale the radius by 1.02 on x and z to match the visual mesh\n            shape = new CANNON.Sphere(radius * 1.02);\n        } else {\n            // For other fruits, use a sphere shape\n            shape = new CANNON.Sphere(radius);\n        }\n        \n        // Create body\n        body = new CANNON.Body({\n            mass: 1,\n            shape: shape,\n            position: new CANNON.Vec3(position.x, position.y, 0),\n            material: this.fruitMaterial,\n            linearDamping: 0.1,\n            angularDamping: 0.3,\n            collisionFilterGroup: isCurrent ? 0 : 1,\n            collisionFilterMask: isCurrent ? 0 : 1\n        });\n        \n        // Constrain movement to the x-y plane only\n        body.linearFactor = new CANNON.Vec3(1, 1, 0); // Only allow movement in x and y\n        body.angularFactor = new CANNON.Vec3(0, 0, 1); // Only allow rotation around z axis\n        \n        // Add body to the physics world\n        this.world.addBody(body);\n        \n        // Add event listener for collision\n        body.addEventListener('collide', (event) => {\n            // Play collision sound for non-current fruits only\n            if (!isCurrent && window.audioManager) {\n                // Calculate relative velocity for volume\n                const relativeVelocity = event.contact.getImpactVelocityAlongNormal();\n                const volume = Math.min(Math.abs(relativeVelocity) / 10, 1);\n                \n                // Only play sounds for significant collisions\n                if (volume > 0.1) {\n                    // Play with pitch variation\n                    const pitch = 0.8 + (Math.random() * 0.4); // Between 0.8 and 1.2\n                    window.audioManager.playSound('hit', pitch, volume);\n                }\n            }\n        });\n        \n        return body;\n    }\n\n    // Main method to create a complete fruit with both visual and physics components\n    createFruit(type, position, isCurrent = false) {\n        try {\n            // Create the mesh (visual representation)\n            const mesh = this.createFruitGeometry(type);\n            \n            // Position the mesh\n            mesh.position.copy(position);\n            \n            // Create physics body\n            const body = this.createFruitBody(type, position, isCurrent);\n            \n            // Make fruit semi-transparent if it's the current fruit\n            if (isCurrent) {\n                mesh.traverse((child) => {\n                    if (child.isMesh) {\n                        // Make mesh semi-transparent\n                        if (child.material) {\n                            child.material = child.material.clone();\n                            child.material.transparent = true;\n                            child.material.opacity = 0.7;\n                        }\n                    }\n                });\n            }\n            \n            // Add to scene\n            if (this.scene) {\n                this.scene.add(mesh);\n            }\n            \n            // Create particle trail system for this fruit\n            this.particleSystem.createParticleSystem(mesh, type.color);\n\n            // Create and return the fruit object\n            const fruit = {\n                mesh,\n                body,\n                type,\n                dropTime: null\n            };\n            \n            return fruit;\n        } catch (error) {\n            console.error(\"Error in FruitFactory.createFruit:\", error);\n            // Return a dummy object to prevent cascading errors\n            return {\n                mesh: { position: new THREE.Vector3(position.x, position.y, 0), quaternion: new THREE.Quaternion() },\n                body: {\n                    position: new CANNON.Vec3(position.x, position.y, 0),\n                    quaternion: new CANNON.Quaternion(),\n                    velocity: new CANNON.Vec3(0, 0, 0),\n                    angularVelocity: new CANNON.Vec3(0, 0, 0),\n                    type: 0,\n                    addEventListener: () => {}\n                },\n                type: type\n            };\n        }\n    }\n\n    update() {\n        // Update particle trails\n        this.particleSystem.update();\n    }\n}\n","// socialShare.js - Social media sharing functionality\n\nclass SocialShare {\n    constructor() {\n        this.gameUrl = 'https://www.ainosuika.com';\n        this.defaultMessage = \"I scored {score} in Ai-No-Suika Game! Can you beat my score?\";\n        \n        // Static preview image URL\n        this.previewImageUrl = 'https://www.ainosuika.com/main/preview.png';\n    }\n\n    /**\n     * Create sharing buttons for different social media platforms\n     * @param {number} score - The player's score to share\n     * @returns {HTMLDivElement} Container with social buttons\n     */\n    createSocialButtons(score) {\n        console.log(\"Creating social buttons for score:\", score);\n        const shareContainer = document.createElement('div');\n        shareContainer.className = 'social-share-container';\n        shareContainer.style.display = 'flex';\n        shareContainer.style.flexDirection = 'row'; // Ensure horizontal layout\n        shareContainer.style.justifyContent = 'center';\n        shareContainer.style.gap = '10px';\n        shareContainer.style.marginTop = '15px';\n        shareContainer.style.width = '100%'; // Ensure full width\n        \n        // Create share text with the score\n        const shareText = this.defaultMessage.replace('{score}', score);\n        \n        // Create X (formerly Twitter) share button\n        const twitterButton = this.createShareButton(\n            'X',\n            '#000000',\n            () => this.shareOnTwitter(shareText, score)\n        );\n        \n        // Create Facebook share button\n        const facebookButton = this.createShareButton(\n            '👍 Facebook',\n            '#4267B2',\n            () => this.shareOnFacebook(score)\n        );\n        \n        // Create WhatsApp share button\n        const whatsAppButton = this.createShareButton(\n            '💬 WhatsApp',\n            '#25D366',\n            () => this.shareOnWhatsApp(shareText)\n        );\n        \n        // Create Copy Text button for other platforms\n        const copyTextButton = this.createShareButton(\n            '📋 Share',\n            '#7289DA', // Discord-inspired color\n            () => this.copyShareText(shareText, score)\n        );\n\n        // Add buttons to container\n        shareContainer.appendChild(twitterButton);\n        shareContainer.appendChild(facebookButton);\n        shareContainer.appendChild(whatsAppButton);\n        shareContainer.appendChild(copyTextButton);\n        \n        console.log(\"Social buttons created, count:\", shareContainer.childNodes.length);\n        return shareContainer;\n    }\n\n    /**\n     * Create a styled button for sharing\n     * @param {string} text - Button text\n     * @param {string} color - Button background color\n     * @param {Function} clickHandler - Function to execute on click\n     * @returns {HTMLButtonElement} Styled button element\n     */\n    createShareButton(text, color, clickHandler) {\n        const button = document.createElement('button');\n        button.innerText = text;\n        button.style.padding = '8px 15px';\n        button.style.margin = '5px';\n        button.style.borderRadius = '5px';\n        button.style.border = 'none';\n        button.style.backgroundColor = color;\n        button.style.color = 'white';\n        button.style.cursor = 'pointer';\n        button.style.fontWeight = 'bold';\n        button.style.display = 'inline-block'; // Ensure button is displayed\n        button.style.minWidth = '100px'; // Ensure minimum width\n        button.addEventListener('click', clickHandler);\n        return button;\n    }\n\n    /**\n     * Share score on X (formerly Twitter)\n     * @param {string} text - Text to share\n     * @param {number} score - Player's score\n     */\n    shareOnTwitter(text, score) {\n        // Update meta tags first for better preview\n        this.updateMetaTags(score);\n        \n        // Add a cache-busting parameter to the preview image URL for X\n        const cachedImageUrl = `${this.previewImageUrl}?v=${Date.now()}`;\n        this.updateMetaTag('twitter:image', cachedImageUrl);\n        \n        // Create X intent URL with score and hashtags\n        const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(this.gameUrl)}&hashtags=AiNoSuikaGame,VibeJam`;\n        \n        // Open in a new window\n        window.open(twitterUrl, '_blank');\n    }\n\n    /**\n     * Share score on Facebook\n     * @param {number} score - Player's score\n     */\n    shareOnFacebook(score) {\n        // Update meta tags first for better preview\n        this.updateMetaTags(score);\n        \n        // Create a more engaging challenge message for Facebook\n        const challengeMessage = `I just scored ${score} points in Ai-No-Suika Game! Think you can beat my score? Challenge accepted? #AiNoSuikaGame #VibeJam`;\n        \n        // For Facebook we use the standard sharing dialog with the challenge message\n        const fbUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(this.gameUrl)}&quote=${encodeURIComponent(challengeMessage)}`;\n        \n        // Open in a new window\n        window.open(fbUrl, '_blank');\n    }\n\n    /**\n     * Share score on WhatsApp\n     * @param {string} text - Text to share\n     */\n    shareOnWhatsApp(text) {\n        // Create WhatsApp share URL\n        const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(text + ' ' + this.gameUrl)}`;\n        window.open(whatsappUrl, '_blank');\n    }\n    \n    /**\n     * Copy share text to clipboard for other platforms\n     * @param {string} text - Text to share\n     * @param {number} score - Player's score\n     */\n    copyShareText(text, score) {\n        // Create a more engaging challenge message\n        const copyMessage = `I just scored ${score} points in Ai-No-Suika Game! Think you can beat my score? Challenge accepted! Play at ${this.gameUrl} #AiNoSuikaGame #VibeJam`;\n        \n        // Create a temporary textarea element\n        const textarea = document.createElement('textarea');\n        textarea.value = copyMessage;\n        textarea.setAttribute('readonly', '');\n        textarea.style.position = 'absolute';\n        textarea.style.left = '-9999px';\n        document.body.appendChild(textarea);\n        \n        // Select and copy the text\n        textarea.select();\n        document.execCommand('copy');\n        \n        // Remove the textarea\n        document.body.removeChild(textarea);\n        \n        // Show feedback to the user\n        alert('Share text copied to clipboard! Now you can paste it anywhere.');\n    }\n    \n    /**\n     * Update the meta tags with the player's score\n     * @param {number} score - Player's score\n     */\n    updateMetaTags(score) {\n        // Update meta tags to include the score\n        const shareText = this.defaultMessage.replace('{score}', score);\n        \n        // Update Open Graph title and description\n        this.updateMetaTag('og:title', 'Ai-No-Suika Game - Score: ' + score);\n        this.updateMetaTag('og:description', shareText);\n        \n        // Update Twitter Card title and description\n        this.updateMetaTag('twitter:title', 'Ai-No-Suika Game - Score: ' + score);\n        this.updateMetaTag('twitter:description', shareText);\n        \n        // Update Open Graph image\n        this.updateMetaTag('og:image', this.previewImageUrl);\n        this.updateMetaTag('twitter:image', this.previewImageUrl);\n    }\n    \n    /**\n     * Update a meta tag in the document head\n     * @param {string} property - Meta tag property to update\n     * @param {string} content - New content value\n     */\n    updateMetaTag(property, content) {\n        let metaTag = document.querySelector(`meta[property=\"${property}\"]`) || \n                     document.querySelector(`meta[name=\"${property}\"]`);\n        \n        if (metaTag) {\n            metaTag.setAttribute('content', content);\n        } else {\n            metaTag = document.createElement('meta');\n            metaTag.setAttribute(property.includes(':') ? 'property' : 'name', property);\n            metaTag.setAttribute('content', content);\n            document.head.appendChild(metaTag);\n        }\n    }\n}\n\n// Export a singleton instance\nexport const socialShare = new SocialShare();\n","// comboSystem.js\nimport * as THREE from 'three';\nimport { CONTAINER_HEIGHT } from './constants.js';\n\nexport class ComboSystem {\n    constructor(scene) {\n        this.scene = scene;\n        this.comboCount = 0;\n        this.lastComboTime = 0;\n        this.comboTimeout = 1500; // 1.5 seconds to maintain combo\n        this.comboText = null;\n        this.comboParticles = new THREE.Group();\n        this.scene.add(this.comboParticles);\n        \n        // Create combo text sprite with wider canvas\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        canvas.width = 512; // Doubled width for better text fitting\n        canvas.height = 128;\n        this.textCanvas = canvas;\n        this.textContext = context;\n        \n        const texture = new THREE.CanvasTexture(canvas);\n        const spriteMaterial = new THREE.SpriteMaterial({ \n            map: texture,\n            transparent: true\n        });\n        this.comboText = new THREE.Sprite(spriteMaterial);\n        this.comboText.scale.set(4, 1, 1); // Increased width scale to match canvas ratio\n        this.comboText.visible = false;\n        this.scene.add(this.comboText);\n    }\n\n    // Get the current combo multiplier\n    getComboMultiplier() {\n        if (this.comboCount < 2) return 1;\n        // Increase multiplier with combo, but cap it at 5x\n        return Math.min(1 + (this.comboCount - 1) * 0.5, 5);\n    }\n\n    // Get text to display for combo multiplier\n    getComboMultiplierText() {\n        const multiplier = this.getComboMultiplier();\n        return multiplier > 1 ? `${multiplier.toFixed(1)}x` : '';\n    }\n\n    incrementCombo(position, fruitColor) {\n        const now = Date.now();\n        if (now - this.lastComboTime > this.comboTimeout) {\n            this.comboCount = 0;\n        }\n        \n        this.comboCount++;\n        this.lastComboTime = now;\n        \n        // Update combo text\n        this.updateComboText(position);\n        \n        // Create combo particles with fruit color\n        this.createComboParticles(position, fruitColor);\n\n        return this.getComboMultiplier();\n    }\n\n    updateComboText(position) {\n        if (this.comboCount < 2) {\n            this.comboText.visible = false;\n            return;\n        }\n\n        // Update canvas text\n        const ctx = this.textContext;\n        ctx.clearRect(0, 0, this.textCanvas.width, this.textCanvas.height);\n        \n        // Add a subtle background for better readability\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n        ctx.fillRect(0, 0, this.textCanvas.width, this.textCanvas.height);\n        \n        ctx.fillStyle = this.getComboColor();\n        ctx.strokeStyle = 'white';\n        ctx.lineWidth = 4;\n        ctx.font = 'bold 64px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        \n        const text = `${this.comboCount}x COMBO!`;\n        const x = this.textCanvas.width / 2;\n        const y = this.textCanvas.height / 2;\n        \n        // Draw text stroke and fill\n        ctx.strokeText(text, x, y);\n        ctx.fillText(text, x, y);\n        \n        // Update sprite\n        this.comboText.material.map.needsUpdate = true;\n        \n        // Position at the center top of the container\n        this.comboText.position.set(\n            0, // Center x position\n            CONTAINER_HEIGHT - 1, // Slightly below the top edge\n            0  // Center z position\n        );\n        this.comboText.visible = true;\n    }\n\n    createComboParticles(position, fruitColor) {\n        const particleCount = Math.min(this.comboCount * 5, 20);\n        \n        // Convert hex color to THREE.Color if it's a number\n        const color = typeof fruitColor === 'number' ? \n            new THREE.Color(fruitColor) : fruitColor;\n            \n        for (let i = 0; i < particleCount; i++) {\n            const particle = new THREE.Mesh(\n                new THREE.CircleGeometry(0.1, 8),\n                new THREE.MeshBasicMaterial({\n                    color: color,\n                    transparent: true,\n                    opacity: 1\n                })\n            );\n            \n            // Keep particles at merge position\n            particle.position.copy(position);\n            \n            // Random velocity\n            const angle = Math.random() * Math.PI * 2;\n            const speed = 0.1 + Math.random() * 0.2;\n            particle.userData.velocity = new THREE.Vector3(\n                Math.cos(angle) * speed,\n                Math.sin(angle) * speed,\n                0\n            );\n            \n            this.comboParticles.add(particle);\n        }\n    }\n\n    getComboColor() {\n        // Color gets more intense with higher combos\n        if (this.comboCount >= 8) return '#FF0000';      // Red\n        if (this.comboCount >= 6) return '#FF6600';      // Orange\n        if (this.comboCount >= 4) return '#FFCC00';      // Yellow\n        return '#FFFFFF';                                 // White\n    }\n\n    update() {\n        // Fade out combo text\n        if (this.comboText.visible) {\n            const elapsed = Date.now() - this.lastComboTime;\n            if (elapsed > this.comboTimeout) {\n                this.comboText.visible = false;\n                this.comboCount = 0;\n            }\n        }\n\n        // Update particles\n        for (let i = this.comboParticles.children.length - 1; i >= 0; i--) {\n            const particle = this.comboParticles.children[i];\n            \n            // Update position\n            particle.position.add(particle.userData.velocity);\n            \n            // Update opacity\n            particle.material.opacity *= 0.95;\n            \n            // Remove if fully transparent\n            if (particle.material.opacity < 0.1) {\n                particle.geometry.dispose();\n                particle.material.dispose();\n                this.comboParticles.remove(particle);\n            }\n        }\n    }\n\n    dispose() {\n        if (this.comboText) {\n            this.comboText.material.map.dispose();\n            this.comboText.material.dispose();\n            this.scene.remove(this.comboText);\n        }\n\n        this.comboParticles.children.forEach(particle => {\n            particle.geometry.dispose();\n            particle.material.dispose();\n        });\n        this.scene.remove(this.comboParticles);\n    }\n}\n","// leaderboard.js - Local leaderboard functionality\nimport { socialShare } from './socialShare.js';\n\nclass Leaderboard {\n    constructor() {\n        this.storageKey = 'aiNoSuikaLeaderboard';\n        this.maxEntries = 10;\n        this.scores = this.loadScores();\n    }\n\n    /**\n     * Load scores from local storage\n     */\n    loadScores() {\n        const saved = localStorage.getItem(this.storageKey);\n        return saved ? JSON.parse(saved) : [];\n    }\n\n    /**\n     * Save scores to local storage\n     */\n    saveScores() {\n        localStorage.setItem(this.storageKey, JSON.stringify(this.scores));\n    }\n\n    /**\n     * Add a new score to the leaderboard\n     * @param {number} score - The score to add\n     * @returns {object} Position info: {isHighScore, rank, isTopTen}\n     */\n    addScore(score) {\n        const newEntry = {\n            score: score,\n            date: new Date().toISOString()\n        };\n\n        // Insert score in correct position\n        const position = this.scores.findIndex(entry => entry.score < score);\n        if (position === -1) {\n            this.scores.push(newEntry);\n        } else {\n            this.scores.splice(position, 0, newEntry);\n        }\n\n        // Keep only top scores\n        if (this.scores.length > this.maxEntries) {\n            this.scores = this.scores.slice(0, this.maxEntries);\n        }\n\n        this.saveScores();\n\n        return {\n            isHighScore: position === 0,\n            rank: position === -1 ? this.scores.length : position + 1,\n            isTopTen: position < this.maxEntries\n        };\n    }\n\n    /**\n     * Create the leaderboard UI\n     * @param {number} currentScore - Current game score\n     * @returns {HTMLElement} Leaderboard container\n     */\n    createLeaderboardUI(currentScore) {\n        const container = document.createElement('div');\n        container.style.marginTop = '20px';\n        container.style.marginBottom = '30px'; \n        container.style.textAlign = 'center';\n        container.style.color = 'white';\n        container.style.fontFamily = 'Arial, sans-serif';\n\n        // Add title\n        const title = document.createElement('h2');\n        title.textContent = 'High Scores';\n        title.style.marginBottom = '15px';\n        container.appendChild(title);\n\n        // Create score list\n        const scoreList = document.createElement('div');\n        scoreList.style.display = 'flex';\n        scoreList.style.flexDirection = 'column';\n        scoreList.style.gap = '5px';\n        scoreList.style.maxWidth = '300px';\n        scoreList.style.margin = '0 auto';\n        scoreList.style.marginBottom = '30px'; \n        scoreList.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n        scoreList.style.padding = '15px';\n        scoreList.style.borderRadius = '8px';\n\n        this.scores.forEach((entry, index) => {\n            const scoreEntry = document.createElement('div');\n            scoreEntry.style.display = 'flex';\n            scoreEntry.style.justifyContent = 'space-between';\n            scoreEntry.style.padding = '5px';\n            \n            // Highlight if this is the current score\n            if (entry.score === currentScore) {\n                scoreEntry.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';\n                scoreEntry.style.borderRadius = '4px';\n            }\n\n            const rank = document.createElement('span');\n            rank.textContent = `#${index + 1}`;\n            rank.style.fontWeight = 'bold';\n\n            const score = document.createElement('span');\n            score.textContent = entry.score.toLocaleString();\n\n            scoreEntry.appendChild(rank);\n            scoreEntry.appendChild(score);\n            scoreList.appendChild(scoreEntry);\n        });\n\n        container.appendChild(scoreList);\n\n        // Add share button if it's a high score\n        if (this.scores.some(entry => entry.score === currentScore)) {\n            const shareContainer = socialShare.createSocialButtons(currentScore);\n            shareContainer.style.marginTop = '15px';\n            container.appendChild(shareContainer);\n        }\n\n        return container;\n    }\n}\n\n// Export a singleton instance\nexport const leaderboard = new Leaderboard();\n","// Import necessary libraries\nimport * as THREE from 'three';\nimport * as CANNON from 'cannon-es';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { \n    CONTAINER_WIDTH, \n    CONTAINER_HEIGHT, \n    CONTAINER_DEPTH,\n    COOLDOWN_DELAY,\n    DROP_DELAY,\n    GAME_OVER_HEIGHT,\n    PAPER_BAG_COLOR,\n    PAPER_BAG_EMISSIVE,\n    PAPER_BAG_EMISSIVE_INTENSITY,\n    MAIN_LIGHT_INTENSITY,\n    AMBIENT_LIGHT_INTENSITY,\n    BAG_LIGHT_INTENSITY,\n    SPOTLIGHT_INTENSITY\n} from './constants.js';\n\n// Import audio manager\nimport { audioManager } from './audioManager.js';\n\n// Import texture manager\nimport { TextureManager } from './textureManager.js';\n\n// Import score manager\nimport { ScoreManager } from './scoreManager.js';\n\n// Import fruit factory\nimport { FruitFactory } from './fruitFactory.js';\n\n// Import social share functionality\nimport { socialShare } from './socialShare.js';\n\n// Import combo system\nimport { ComboSystem } from './comboSystem.js';\n\n// Import leaderboard\nimport { leaderboard } from './leaderboard.js';\n\n// Import fruit data\nconst FRUITS = [\n    { \n        name: 'Cherry', \n        radius: 0.4, \n        color: 0xE41B17, \n        points: 1, \n        emoji: '🍒',\n        stemColor: 0x4A7023,\n        shape: 'cherry'\n    },\n    { \n        name: 'Strawberry', \n        radius: 0.5, \n        color: 0xFF2052, \n        points: 2, \n        emoji: '🍓',\n        leafColor: 0x2D5A27,\n        shape: 'strawberry'\n    },\n    { \n        name: 'Grape', \n        radius: 0.6, \n        color: 0x9933FF, \n        points: 3, \n        emoji: '🍇',\n        shape: 'grape'\n    },\n    { \n        name: 'Orange', \n        radius: 0.65, \n        color: 0xFF8C00, \n        points: 4, \n        emoji: '🍊',\n        bumpScale: 0.05,\n        shape: 'orange'\n    },\n    { \n        name: 'Apple', \n        radius: 0.85, \n        color: 0xFF0000, \n        points: 5, \n        emoji: '🍎',\n        stemColor: 0x4A7023,\n        shape: 'apple'\n    },\n    { \n        name: 'Pear', \n        radius: 0.95, \n        color: 0xFFD700, \n        points: 6, \n        emoji: '🍐',\n        shape: 'pear'\n    },\n    { \n        name: 'Peach', \n        radius: 1.2, \n        color: 0xFFCBA4, \n        points: 7, \n        emoji: '🍑',\n        shape: 'peach'\n    },\n    { \n        name: 'Pumpkin', \n        radius: 1.4, \n        color: 0xFF7518, \n        points: 8, \n        emoji: '🎃',\n        stemColor: 0x228B22,\n        shape: 'pumpkin'\n    },\n    { \n        name: 'Melon', \n        radius: 1.6, \n        color: 0x98FF98, \n        points: 9, \n        emoji: '🍈',\n        stripeColor: 0x228B22,\n        shape: 'melon'\n    },\n    { \n        name: 'Watermelon', \n        radius: 1.8, \n        color: 0x00BB2D, \n        points: 10, \n        emoji: '🍉',\n        stripeColor: 0x006400,\n        shape: 'watermelon'\n    }\n];\n\nclass SuikaGame {\n    constructor() {\n        // Initialize properties but don't start yet\n        this.fruits = [];\n        this.currentFruit = null;\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDown = false;\n        this.gameOver = false;\n        this.musicPlaying = false;\n        this.dropCooldown = false; // Track if we're in cooldown after dropping a fruit\n        this.textureManager = new TextureManager();\n        this.scoreManager = new ScoreManager();\n        this.lastDropTime = 0;\n        this.gameStarted = false;\n        this.animationFrameId = null;\n        this.fruitFactory = null;\n        this.lastTimestamp = 0; // For delta time calculation\n        this.recentFruits = [];\n        this.maxRecentFruits = 3; // Keep track of last 3 fruits\n        this.comboSystem = null; // Will be initialized in init()\n    }\n    \n    init() {\n        // Three.js setup\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        this.camera.position.set(0, CONTAINER_HEIGHT / 2, 7);\n        this.camera.lookAt(0, CONTAINER_HEIGHT / 2, 0);\n        \n        // Setup lighting\n        this.setupLighting();\n        \n        // Setup renderer\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setClearColor(0x1a1a1a);\n        document.body.appendChild(this.renderer.domElement);\n\n        // Initialize audio manager\n        audioManager.init();\n        \n        // Physics world setup\n        this.initPhysics();\n        \n        // Initialize FruitFactory\n        this.fruitFactory = new FruitFactory(this.world, this.fruitMaterial, this.textureManager, this.scene);\n        \n        // Camera position\n        this.camera.position.set(0, CONTAINER_HEIGHT / 2, 12);\n        this.camera.lookAt(0, CONTAINER_HEIGHT / 2, 0);\n\n        // Create container walls\n        this.createContainer();\n\n        // Game state\n        this.nextFruitType = this.getRandomSmallFruit();\n        this.scoreManager.updateScore(0);\n\n        // Add raycaster for mouse position\n        this.raycaster = new THREE.Raycaster();\n        this.mousePlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\n        this.intersectionPoint = new THREE.Vector3();\n\n        // Event listeners\n        window.addEventListener('resize', () => this.onWindowResize());\n        window.addEventListener('mousemove', (e) => this.onMouseMove(e));\n        window.addEventListener('click', () => this.dropFruit());\n\n        // Initialize combo system\n        this.comboSystem = new ComboSystem(this.scene);\n\n        // Start game loop\n        this.animate(0);\n    }\n\n    initPhysics() {\n        // Initialize physics world\n        this.world = new CANNON.World({\n            gravity: new CANNON.Vec3(0, -25.0, 0) // Significantly increased from -15.0 to -25.0\n        });\n        \n        // Create materials\n        this.fruitMaterial = new CANNON.Material('fruit');\n        this.wallMaterial = new CANNON.Material('wall');\n        \n        // Create contact material\n        const fruitWallContact = new CANNON.ContactMaterial(this.fruitMaterial, this.wallMaterial, {\n            friction: 0.35,\n            restitution: 0.25 // Reduced from 0.4 to make fruits bounce less\n        });\n        this.world.addContactMaterial(fruitWallContact);\n        \n        // Create contact material for fruit-to-fruit interactions\n        const fruitFruitContact = new CANNON.ContactMaterial(this.fruitMaterial, this.fruitMaterial, {\n            friction: 0.5,      // Higher friction between fruits to reduce sliding\n            restitution: 0.15,   // Reduced from 0.2 to make fruits bounce less\n            contactEquationStiffness: 1e6,    // Softer contacts to prevent explosive forces\n            contactEquationRelaxation: 3,     // Slower relaxation for more stability\n            frictionEquationStiffness: 1e6,   // Stable friction\n            frictionEquationRelaxation: 3     // Slower friction relaxation\n        });\n        this.world.addContactMaterial(fruitFruitContact);\n        \n        // Solver iteration settings for better stability\n        this.world.solver.iterations = 20;     // More iterations for better stability (default is 10)\n        this.world.solver.tolerance = 0.001;   // Lower tolerance for more precise solutions\n        \n        // Create the container walls - marking them with isWall property\n        this.createContainerWalls();\n        \n        // Initialize fruit factory now that we have a physics world\n    }\n    \n    createContainerWalls() {\n        console.log(\"Creating container walls\");\n        \n        // Bottom wall\n        const bottomWall = this.createWall(\n            new CANNON.Vec3(0, 0, 0),\n            new CANNON.Vec3(CONTAINER_WIDTH / 2 + 0.5, 0.5, 0.5),\n            this.wallMaterial\n        );\n        bottomWall.isWall = true;\n        \n        // Left wall\n        const leftWall = this.createWall(\n            new CANNON.Vec3(-CONTAINER_WIDTH / 2 - 0.5, CONTAINER_HEIGHT / 2, 0),\n            new CANNON.Vec3(0.5, CONTAINER_HEIGHT / 2, 0.5),\n            this.wallMaterial\n        );\n        leftWall.isWall = true;\n        \n        // Right wall\n        const rightWall = this.createWall(\n            new CANNON.Vec3(CONTAINER_WIDTH / 2 + 0.5, CONTAINER_HEIGHT / 2, 0),\n            new CANNON.Vec3(0.5, CONTAINER_HEIGHT / 2, 0.5),\n            this.wallMaterial\n        );\n        rightWall.isWall = true;\n        \n        // Back wall\n        const backWall = this.createWall(\n            new CANNON.Vec3(0, CONTAINER_HEIGHT / 2, -CONTAINER_DEPTH / 2),\n            new CANNON.Vec3(CONTAINER_WIDTH / 2 + 0.5, CONTAINER_HEIGHT / 2, 0.5),\n            this.wallMaterial\n        );\n        backWall.isWall = true;\n        \n        // Add a floor sensor below the container to detect escaped fruits\n        const floorSensor = new CANNON.Body({\n            type: CANNON.Body.STATIC,\n            shape: new CANNON.Box(new CANNON.Vec3(CONTAINER_WIDTH * 2, 0.1, CONTAINER_DEPTH * 2)),\n            position: new CANNON.Vec3(0, -5, 0), // Position it 5 units below the container\n            material: this.wallMaterial,\n            isTrigger: true, // Make it a trigger/sensor\n            collisionResponse: false // Don't physically collide, just detect\n        });\n        \n        // Mark it as a sensor\n        floorSensor.isSensor = true;\n        \n        // Add to world\n        this.world.addBody(floorSensor);\n        \n        // Store reference\n        this.floorSensor = floorSensor;\n    }\n    \n    createWall(position, halfExtents, material = this.world.defaultMaterial) {\n        const shape = new CANNON.Box(halfExtents);\n        const body = new CANNON.Body({\n            mass: 0,\n            shape: shape,\n            material: material,\n            position: position\n        });\n        body.isWall = true; // Mark this body as a wall\n        this.world.addBody(body);\n        return body;\n    }\n\n    setupLighting() {\n        // Main directional light (like sunlight)\n        const mainLight = new THREE.DirectionalLight(0xffffff, MAIN_LIGHT_INTENSITY);\n        mainLight.position.set(5, 10, 5);\n        mainLight.castShadow = true;\n        this.scene.add(mainLight);\n        \n        // Ambient light to brighten up the entire scene\n        const ambientLight = new THREE.AmbientLight(0xffffff, AMBIENT_LIGHT_INTENSITY);\n        this.scene.add(ambientLight);\n        \n        // Add a point light near the bag to highlight it\n        const bagLight = new THREE.PointLight(0xffffff, BAG_LIGHT_INTENSITY, 15);\n        bagLight.position.set(0, CONTAINER_HEIGHT, 2);\n        this.scene.add(bagLight);\n        \n        // Add an additional spotlight focused on the bag\n        const spotLight = new THREE.SpotLight(0xffffff, SPOTLIGHT_INTENSITY);\n        spotLight.position.set(0, CONTAINER_HEIGHT + 3, 5);\n        spotLight.angle = Math.PI / 4;\n        spotLight.penumbra = 0.1;\n        spotLight.decay = 2;\n        spotLight.distance = 20;\n        spotLight.target.position.set(0, CONTAINER_HEIGHT / 2, 0);\n        this.scene.add(spotLight);\n        this.scene.add(spotLight.target);\n    }\n\n    createContainer() {\n        // Create invisible walls using physics\n        const wallThickness = 0.2;\n        const wallOffset = 0.2; // Extra space between visual container and physics walls\n        \n        // Bottom wall - only within the container boundaries\n        const bottomWall = new CANNON.Body({\n            type: CANNON.Body.STATIC,\n            material: this.wallMaterial\n        });\n        \n        // Create a box shape for the bottom that only covers the valid container area\n        const bottomShape = new CANNON.Box(\n            new CANNON.Vec3(CONTAINER_WIDTH / 2, wallThickness, CONTAINER_DEPTH / 2)\n        );\n        bottomWall.addShape(bottomShape, new CANNON.Vec3(0, 0, 0));\n        bottomWall.position.set(0, 0, 0);\n        bottomWall.isWall = true;\n        this.world.addBody(bottomWall);\n\n        // Left wall\n        this.createWall(\n            new CANNON.Vec3(-(CONTAINER_WIDTH / 2 + wallOffset), CONTAINER_HEIGHT / 2, 0),\n            new CANNON.Vec3(wallThickness, CONTAINER_HEIGHT / 2, CONTAINER_DEPTH / 2)\n        );\n\n        // Right wall\n        this.createWall(\n            new CANNON.Vec3(CONTAINER_WIDTH / 2 + wallOffset, CONTAINER_HEIGHT / 2, 0),\n            new CANNON.Vec3(wallThickness, CONTAINER_HEIGHT / 2, CONTAINER_DEPTH / 2)\n        );\n\n        // Back wall\n        this.createWall(\n            new CANNON.Vec3(0, CONTAINER_HEIGHT / 2, -CONTAINER_DEPTH / 2),\n            new CANNON.Vec3(CONTAINER_WIDTH / 2 + wallThickness, CONTAINER_HEIGHT / 2, wallThickness)\n        );\n\n        // Create a paper bag appearance\n        this.createPaperBag();\n    }\n    \n    createPaperBag() {\n        // Create a paper texture\n        const paperTexture = this.textureManager.paperTexture;\n        \n        const bagMaterial = new THREE.MeshStandardMaterial({\n            color: PAPER_BAG_COLOR, \n            metalness: 0.0,  // No metalness for paper\n            roughness: 0.7,  // Slightly rougher for paper texture\n            map: paperTexture,\n            side: THREE.DoubleSide,\n            emissive: PAPER_BAG_EMISSIVE, // Darker brown emissive for depth\n            emissiveIntensity: PAPER_BAG_EMISSIVE_INTENSITY // Increased from 0.2 to make it glow more\n        });\n        \n        // Bottom of the bag\n        const bottom = new THREE.Mesh(\n            new THREE.BoxGeometry(CONTAINER_WIDTH, 0.1, CONTAINER_DEPTH),\n            bagMaterial\n        );\n        bottom.position.set(0, 0.05, 0);\n        this.scene.add(bottom);\n        \n        // Left side of the bag\n        const leftSide = new THREE.Mesh(\n            new THREE.PlaneGeometry(CONTAINER_DEPTH, CONTAINER_HEIGHT),\n            bagMaterial\n        );\n        leftSide.position.set(-CONTAINER_WIDTH/2, CONTAINER_HEIGHT/2, 0);\n        leftSide.rotation.y = Math.PI/2;\n        this.scene.add(leftSide);\n        \n        // Right side of the bag\n        const rightSide = new THREE.Mesh(\n            new THREE.PlaneGeometry(CONTAINER_DEPTH, CONTAINER_HEIGHT),\n            bagMaterial\n        );\n        rightSide.position.set(CONTAINER_WIDTH/2, CONTAINER_HEIGHT/2, 0);\n        rightSide.rotation.y = -Math.PI/2;\n        this.scene.add(rightSide);\n        \n        // Back of the bag\n        const backSide = new THREE.Mesh(\n            new THREE.PlaneGeometry(CONTAINER_WIDTH, CONTAINER_HEIGHT),\n            bagMaterial\n        );\n        backSide.position.set(0, CONTAINER_HEIGHT/2, -CONTAINER_DEPTH/2);\n        this.scene.add(backSide);\n        \n        // Bag top trim/fold (just the sides and back)\n        const foldThickness = 0.3;\n        const foldHeight = 0.6;\n        \n        // Left fold\n        const leftFold = new THREE.Mesh(\n            new THREE.PlaneGeometry(CONTAINER_DEPTH, foldHeight),\n            bagMaterial\n        );\n        leftFold.position.set(-CONTAINER_WIDTH/2, CONTAINER_HEIGHT + foldHeight/2, 0);\n        leftFold.rotation.y = Math.PI/2;\n        leftFold.rotation.x = Math.PI/8; // Angle outward slightly\n        this.scene.add(leftFold);\n        \n        // Right fold\n        const rightFold = new THREE.Mesh(\n            new THREE.PlaneGeometry(CONTAINER_DEPTH, foldHeight),\n            bagMaterial\n        );\n        rightFold.position.set(CONTAINER_WIDTH/2, CONTAINER_HEIGHT + foldHeight/2, 0);\n        rightFold.rotation.y = -Math.PI/2;\n        rightFold.rotation.x = Math.PI/8; // Angle outward slightly\n        this.scene.add(rightFold);\n        \n        // Back fold\n        const backFold = new THREE.Mesh(\n            new THREE.PlaneGeometry(CONTAINER_WIDTH, foldHeight),\n            bagMaterial\n        );\n        backFold.position.set(0, CONTAINER_HEIGHT + foldHeight/2, -CONTAINER_DEPTH/2);\n        backFold.rotation.x = Math.PI/8; // Angle outward slightly\n        this.scene.add(backFold);\n        \n        // Add some subtle creases/fold lines to make it look more like paper\n        const createFoldLine = (width, height, x, y, z, rotationY) => {\n            const foldLine = new THREE.Mesh(\n                new THREE.PlaneGeometry(width, height),\n                new THREE.MeshBasicMaterial({ color: 0x7B5B3C, transparent: true, opacity: 0.3, side: THREE.DoubleSide })\n            );\n            foldLine.position.set(x, y, z);\n            foldLine.rotation.y = rotationY || 0;\n            this.scene.add(foldLine);\n        };\n        \n        // Add fold lines to the back\n        createFoldLine(CONTAINER_WIDTH/2, 0.05, -CONTAINER_WIDTH/4, CONTAINER_HEIGHT/2, -CONTAINER_DEPTH/2 + 0.01);\n        createFoldLine(CONTAINER_WIDTH/2, 0.05, CONTAINER_WIDTH/4, CONTAINER_HEIGHT/2, -CONTAINER_DEPTH/2 + 0.01);\n        \n        // Add fold lines to the sides\n        createFoldLine(CONTAINER_DEPTH/2, 0.05, -CONTAINER_WIDTH/2 - 0.01, CONTAINER_HEIGHT/2, -CONTAINER_DEPTH/4, Math.PI/2);\n        createFoldLine(CONTAINER_DEPTH/2, 0.05, -CONTAINER_WIDTH/2 - 0.01, CONTAINER_HEIGHT/2, CONTAINER_DEPTH/4, Math.PI/2);\n        createFoldLine(CONTAINER_DEPTH/2, 0.05, CONTAINER_WIDTH/2 + 0.01, CONTAINER_HEIGHT/2, -CONTAINER_DEPTH/4, Math.PI/2);\n        createFoldLine(CONTAINER_DEPTH/2, 0.05, CONTAINER_WIDTH/2 + 0.01, CONTAINER_HEIGHT/2, CONTAINER_DEPTH/4, Math.PI/2);\n    }\n\n    getRandomSmallFruit() {\n        // Only use the first three fruit types (index 0, 1, 2)\n        const smallFruits = FRUITS.slice(0, 3);\n        \n        // If we have a recent fruit, force a different one\n        if (this.recentFruits.length > 0) {\n            const lastFruit = this.recentFruits[0];\n            // Get fruits that aren't the last one used\n            const availableFruits = smallFruits.filter(f => f.name !== lastFruit.name);\n            // Randomly select from available fruits\n            const selectedFruit = availableFruits[Math.floor(Math.random() * availableFruits.length)];\n            \n            // Update recent fruits list\n            this.recentFruits.unshift({ name: selectedFruit.name });\n            if (this.recentFruits.length > this.maxRecentFruits) {\n                this.recentFruits.pop();\n            }\n            \n            return selectedFruit;\n        }\n        \n        // If no recent fruits, pick any random one\n        const selectedFruit = smallFruits[Math.floor(Math.random() * smallFruits.length)];\n        this.recentFruits.unshift({ name: selectedFruit.name });\n        return selectedFruit;\n    }\n\n    updateScore(points) {\n        this.scoreManager.updateScore(points);\n    }\n\n    createFruitGeometry(type) {\n        switch (type.shape) {\n            case 'cherry': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            case 'strawberry': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            case 'orange': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            case 'watermelon': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            case 'grape': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            case 'apple': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            case 'pear': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            case 'peach': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            case 'melon': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            case 'pumpkin': {\n                // Delegate to fruitFactory for consistent implementation\n                return this.fruitFactory.createFruitGeometry(type);\n            }\n            default: {\n                // Basic sphere for any other fruits\n                const geometry = new THREE.SphereGeometry(type.radius, 32, 32);\n                const material = new THREE.MeshPhongMaterial({ color: type.color });\n                return new THREE.Mesh(geometry, material);\n            }\n        }\n    }\n\n    createFruitBody(radius, position, isCurrent = false, type) {\n        // Safety check - if world is not initialized, initialize it first\n        if (!this.world) {\n            console.log(\"World not initialized, initializing physics first\");\n            this.initPhysics();\n        }\n        \n        let shape;\n        let body;\n        \n        // Use sphere shape for all fruits for consistent behavior\n        shape = new CANNON.Sphere(radius);\n        \n        // Create the physical body\n        if (this.world) {\n            body = new CANNON.Body({\n                mass: 1,\n                shape: shape,\n                position: new CANNON.Vec3(position.x, position.y, 0), // Force Z to 0\n                material: this.fruitMaterial,\n                linearDamping: 0.1,\n                angularDamping: 0.05, // Reduced for more noticeable rotation\n                collisionFilterGroup: isCurrent ? 0 : 1,\n                collisionFilterMask: isCurrent ? 0 : 1\n            });\n        \n            // Track last collision time for sound effects\n            body.lastCollisionTime = 0;\n            body.collisionCooldown = 100; // Milliseconds between sound effects\n            \n            // Track when the fruit was created\n            body.creationTime = Date.now();\n            \n            // Add collision event handler\n            body.addEventListener('collide', (event) => {\n                if (!this.world) return; // Safety check\n                \n                body.velocity.z = 0;\n                body.position.z = 0;\n                \n                // Check if collision is with floor and enough time has passed since last sound\n                const now = Date.now();\n                if (event.body && event.body.material === this.wallMaterial && \n                    now - body.lastCollisionTime > body.collisionCooldown) {\n                    // Play hit sound if audioManager exists\n                    if (typeof audioManager !== 'undefined' && audioManager) {\n                        audioManager.playSound('hit');\n                    }\n                    // Update last collision time\n                    body.lastCollisionTime = now;\n                }\n            });\n            \n            this.world.addBody(body);\n            return body;\n        } else {\n            console.error(\"Failed to create physics body - world is null\");\n            \n            // Return a dummy body object to prevent errors\n            return {\n                position: new CANNON.Vec3(position.x, position.y, 0),\n                quaternion: new CANNON.Quaternion(),\n                velocity: new CANNON.Vec3(0, 0, 0),\n                angularVelocity: new CANNON.Vec3(0, 0, 0),\n                type: 0, // STATIC type\n                addEventListener: () => {},\n                fixedRotation: false,\n                updateMassProperties: () => {}\n            };\n        }\n    }\n\n    createFruit(type, position, isCurrent = false) {\n        // Safety check - ensure initialization\n        if (!this.scene) {\n            console.error(\"Scene is not initialized - cannot create fruit\");\n            // Return a dummy fruit object to prevent further errors\n            return {\n                mesh: { position: position, quaternion: new THREE.Quaternion() },\n                body: {\n                    position: new CANNON.Vec3(position.x, position.y, 0),\n                    quaternion: new CANNON.Quaternion(),\n                    velocity: new CANNON.Vec3(0, 0, 0),\n                    angularVelocity: new CANNON.Vec3(0, 0, 0),\n                    type: 0,\n                    addEventListener: () => {}\n                },\n                type: type\n            };\n        }\n        \n        try {\n            // Create 3D mesh\n            const mesh = this.createFruitGeometry(type);\n            mesh.position.copy(position);\n            \n            // Create physics body\n            const body = this.createFruitBody(type.radius, position, isCurrent, type);\n            \n            // Make fruit semi-transparent if it's the current fruit\n            if (isCurrent) {\n                mesh.traverse((child) => {\n                    if (child.isMesh) {\n                        // Make mesh semi-transparent\n                        if (child.material) {\n                            child.material = child.material.clone();\n                            child.material.transparent = true;\n                            child.material.opacity = 0.7;\n                        }\n                    }\n                });\n            }\n            \n            // Add to scene\n            if (this.scene) {\n                this.scene.add(mesh);\n            }\n            \n            // Create and return fruit object\n            const fruit = {\n                mesh,\n                body,\n                type,\n                dropTime: null\n            };\n            \n            // Add to fruits array if it's not the current fruit\n            if (!isCurrent) {\n                this.fruits.push(fruit);\n            }\n            \n            return fruit;\n        } catch (error) {\n            console.error(\"Error creating fruit:\", error);\n            // Return a dummy object to prevent cascading errors\n            return {\n                mesh: { position: position, quaternion: new THREE.Quaternion() },\n                body: {\n                    position: new CANNON.Vec3(position.x, position.y, 0),\n                    quaternion: new CANNON.Quaternion(),\n                    velocity: new CANNON.Vec3(0, 0, 0),\n                    angularVelocity: new CANNON.Vec3(0, 0, 0),\n                    type: 0,\n                    addEventListener: () => {}\n                },\n                type: type\n            };\n        }\n    }\n\n    checkFruitCombinations() {\n        let combinations = 0;\n        const processedPairs = new Set();\n\n        for (let i = 0; i < this.fruits.length; i++) {\n            const fruitA = this.fruits[i];\n            if (!fruitA.body || !fruitA.mesh) continue;\n\n            for (let j = i + 1; j < this.fruits.length; j++) {\n                const fruitB = this.fruits[j];\n                if (!fruitB.body || !fruitB.mesh) continue;\n\n                // Skip if this pair was already processed\n                const pairId = `${fruitA.id}-${fruitB.id}`;\n                if (processedPairs.has(pairId)) continue;\n\n                const distance = fruitA.mesh.position.distanceTo(fruitB.mesh.position);\n                if (distance < fruitA.type.radius + fruitB.type.radius && fruitA.type.name === fruitB.type.name) {\n                    // Mark this pair as processed\n                    processedPairs.add(pairId);\n\n                    // Calculate midpoint for new fruit\n                    const midpoint = new THREE.Vector3().addVectors(\n                        fruitA.mesh.position,\n                        fruitB.mesh.position\n                    ).multiplyScalar(0.5);\n\n                    // Remove old fruits\n                    this.removeFruit(fruitA);\n                    this.removeFruit(fruitB);\n\n                    // Create new fruit\n                    const nextType = FRUITS[FRUITS.findIndex(f => f.name === fruitA.type.name) + 1];\n                    if (nextType) {\n                        this.createFruit(nextType, midpoint);\n                        combinations++;\n\n                        // Increment combo and get multiplier\n                        const multiplier = this.comboSystem.incrementCombo(midpoint, nextType.color);\n                        \n                        // Update score with combo multiplier\n                        const basePoints = nextType.points;\n                        const bonusPoints = Math.floor(basePoints * (multiplier - 1));\n                        this.scoreManager.addPoints(basePoints + bonusPoints);\n\n                        // Play merge sound\n                        audioManager.playMergeSound();\n                    }\n                }\n            }\n        }\n        return combinations;\n    }\n\n    checkGameOver() {\n        // Check for fruit above the game over line\n        const fruitAboveLine = this.fruits.some(fruit => {\n            // Check if any non-moving fruit is above the line\n            const isAboveLine = fruit.body.position.y > GAME_OVER_HEIGHT;\n            const isStable = fruit.body.velocity.lengthSquared() < 0.1; // Almost stationary\n            const timeSinceCreation = Date.now() - fruit.body.creationTime;\n            const hasGracePeriod = timeSinceCreation < 1000; // 1 second grace period for new fruits\n            \n            return isAboveLine && isStable && !hasGracePeriod;\n        });\n        \n        // Check for fruit that has fallen out of the container\n        const fruitBelowContainer = this.fruits.some(fruit => {\n            // Check if fruit is below a threshold (fallen out)\n            return fruit.body.position.y < -2.0 ||\n                   // Or if it's below bottom level and outside container bounds\n                   (fruit.body.position.y < 0 && \n                    (Math.abs(fruit.body.position.x) > CONTAINER_WIDTH/2 + 0.5));\n        });\n        \n        if ((fruitAboveLine || fruitBelowContainer) && !this.gameOver) {\n            this.gameOver = true;\n            console.log(\"Game over triggered\");\n            if (fruitBelowContainer) {\n                console.log(\"Game over caused by fruit falling out of container\");\n            } else {\n                console.log(\"Game over caused by fruit above height limit\");\n            }\n            this.showGameOverScreen();\n        }\n    }\n    \n    showGameOverScreen() {\n        // Create game over UI\n        const gameOverDiv = document.getElementById('game-over');\n        gameOverDiv.innerHTML = ''; // Clear any existing content\n        gameOverDiv.style.display = 'flex';\n        gameOverDiv.style.flexDirection = 'column';\n        gameOverDiv.style.alignItems = 'center';\n        gameOverDiv.style.justifyContent = 'center';\n        gameOverDiv.style.color = 'white'; // Set default text color for the container\n        gameOverDiv.style.backgroundColor = 'rgba(0, 0, 0, 0.7)'; // Semi-transparent background\n\n        const gameOverTitle = document.createElement('h1');\n        gameOverTitle.innerText = 'Game Over';\n        gameOverTitle.style.color = 'white'; // Force white color\n        gameOverTitle.style.marginBottom = '10px';\n        \n        const finalScore = this.scoreManager.getCurrentScore();\n        const finalScoreDiv = document.createElement('div');\n        finalScoreDiv.innerText = `Final Score: ${finalScore}`;\n        finalScoreDiv.style.fontSize = '24px';\n        finalScoreDiv.style.margin = '10px 0';\n        finalScoreDiv.style.color = 'white'; // Force white color\n        \n        // Add score to leaderboard and get position info\n        const scoreInfo = leaderboard.addScore(finalScore);\n        \n        // Create score status message\n        const scoreStatus = document.createElement('div');\n        if (scoreInfo.isHighScore) {\n            scoreStatus.innerText = '🏆 New High Score! 🏆';\n            scoreStatus.style.color = '#FFD700'; // Gold color\n        } else if (scoreInfo.isTopTen) {\n            scoreStatus.innerText = `🌟 Top ${scoreInfo.rank} Score! 🌟`;\n            scoreStatus.style.color = '#FFA500'; // Orange color\n        }\n        scoreStatus.style.fontSize = '20px';\n        scoreStatus.style.marginBottom = '10px';\n        \n        const restartButton = document.createElement('button');\n        restartButton.id = 'restart-button';\n        restartButton.innerText = 'Play Again';\n        restartButton.style.marginTop = '10px';\n        restartButton.style.marginBottom = '40px'; \n        restartButton.style.padding = '12px 30px'; \n        restartButton.style.fontSize = '18px';\n        restartButton.style.backgroundColor = '#4CAF50';\n        restartButton.style.color = 'white';\n        restartButton.style.border = 'none';\n        restartButton.style.borderRadius = '8px';\n        restartButton.style.cursor = 'pointer';\n        restartButton.style.transition = 'background-color 0.3s';\n        \n        // Add elements to game over screen\n        gameOverDiv.appendChild(gameOverTitle);\n        gameOverDiv.appendChild(finalScoreDiv);\n        if (scoreInfo.isHighScore || scoreInfo.isTopTen) {\n            gameOverDiv.appendChild(scoreStatus);\n        }\n        \n        // Add leaderboard\n        const leaderboardUI = leaderboard.createLeaderboardUI(finalScore);\n        gameOverDiv.appendChild(leaderboardUI);\n        \n        // Add restart button at the bottom\n        gameOverDiv.appendChild(restartButton);\n        \n        // Add event listener for restart\n        restartButton.addEventListener('click', () => {\n            location.reload();\n        });\n    }\n\n    preventBottomClipping() {\n        // Check all fruits\n        for (const fruit of this.fruits) {\n            // Only check fruits that are near the bottom and not moving upward significantly already\n            if (fruit.body && fruit.body.position.y < 0.5 && fruit.body.velocity.y <= 0.1) {\n                // How close to the bottom (0 = at bottom, 0.5 = at our threshold)\n                const proximity = Math.max(0, 0.5 - fruit.body.position.y);\n                \n                // Apply stronger correction the closer we are to the bottom\n                // Scale factor is stronger when closer to 0\n                const correctionFactor = 0.05 + (proximity * 0.2);\n                \n                // Apply a small upward force - stronger the closer to bottom\n                fruit.body.applyForce(\n                    new CANNON.Vec3(0, correctionFactor, 0), // Force in y direction\n                    fruit.body.position // Application point\n                );\n                \n                // If very close to bottom, also directly adjust position slightly\n                if (fruit.body.position.y < 0.05) {\n                    fruit.body.position.y = 0.05;\n                    \n                    // Reset downward velocity\n                    if (fruit.body.velocity.y < 0) {\n                        fruit.body.velocity.y = 0;\n                    }\n                }\n            }\n        }\n    }\n    \n    stabilizeStackedFruits() {\n        // Examine all fruits\n        for (const fruit of this.fruits) {\n            if (!fruit.body) continue;\n            \n            // Skip fruits that were recently dropped (still in active play)\n            if (fruit.dropTime && Date.now() - fruit.dropTime < 2000) continue;\n            \n            // Get the current linear and angular velocity\n            const linearSpeed = fruit.body.velocity.length();\n            const angularSpeed = fruit.body.angularVelocity.length();\n            \n            // Identify fruits that are part of a stable stack\n            // These are fruits that are:\n            // 1. Moving very slowly (nearly at rest)\n            // 2. Have multiple contact points (indicating they're supported)\n            // 3. Have been in play for some time\n            \n            let contactCount = 0;\n            let hasBottomSupport = false;\n            let hasSideSupport = false;\n            \n            // Count contacts and identify support type\n            if (fruit.body.world && fruit.body.world.contacts) {\n                for (let i = 0; i < fruit.body.world.contacts.length; i++) {\n                    const contact = fruit.body.world.contacts[i];\n                    \n                    // Check if this contact involves our fruit\n                    if (contact.bi === fruit.body || contact.bj === fruit.body) {\n                        contactCount++;\n                        \n                        // Get the other body in the contact\n                        const otherBody = contact.bi === fruit.body ? contact.bj : contact.bi;\n                        \n                        // Check if contact normal points roughly upward (bottom support)\n                        const normalDirection = contact.ni.y; // Normal's y component\n                        \n                        if (normalDirection > 0.7) {\n                            hasBottomSupport = true;\n                        } else if (Math.abs(normalDirection) < 0.3) {\n                            hasSideSupport = true;\n                        }\n                    }\n                }\n            }\n            \n            // If the fruit is nearly stationary, has bottom support, and is experiencing side forces\n            if (linearSpeed < 0.3 && hasBottomSupport && hasSideSupport && contactCount >= 3) {\n                // This fruit is likely in a stable stack but experiencing compression\n                \n                // Dampen forces significantly to prevent build-up\n                fruit.body.linearDamping = 0.9;\n                fruit.body.angularDamping = 0.9;\n                \n                // Limit velocities directly to prevent spikes\n                if (linearSpeed > 0.1) {\n                    fruit.body.velocity.scale(0.9, fruit.body.velocity);\n                }\n                \n                if (angularSpeed > 0.3) {\n                    fruit.body.angularVelocity.scale(0.8, fruit.body.angularVelocity);\n                }\n                \n                // For fruits in the bottom portion of the container that have been there a while\n                if (fruit.body.position.y < CONTAINER_HEIGHT/4 && Date.now() - fruit.dropTime > 5000) {\n                    // These are likely load-bearing fruits at the bottom of the stack\n                    // Apply extra force dampening to prevent them from being ejected\n                    \n                    // Check if this fruit is experiencing extreme compression (many contacts)\n                    if (contactCount > 4) {\n                        // For heavily compressed fruits - almost fully stabilize\n                        fruit.body.velocity.scale(0.5, fruit.body.velocity);\n                        fruit.body.angularVelocity.scale(0.5, fruit.body.angularVelocity);\n                    }\n                }\n            }\n        }\n    }\n\n    dispose() {\n        console.log(\"Disposing game resources\");\n        \n        // Stop animation loop if it's running\n        if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n        }\n        \n        // Remove event listeners\n        window.removeEventListener('mousemove', this.onMouseMoveBound);\n        document.removeEventListener('keydown', this.keyDownHandler);\n        document.removeEventListener('click', this.clickHandler);\n        window.removeEventListener('resize', this.onWindowResizeBound);\n        \n        // Dispose of Three.js resources\n        if (this.scene) {\n            // Dispose of all meshes, materials, and textures\n            this.scene.traverse((object) => {\n                if (object.geometry) {\n                    object.geometry.dispose();\n                }\n                \n                if (object.material) {\n                    if (Array.isArray(object.material)) {\n                        object.material.forEach(material => {\n                            if (material.map) material.map.dispose();\n                            material.dispose();\n                        });\n                    } else {\n                        if (object.material.map) object.material.map.dispose();\n                        object.material.dispose();\n                    }\n                }\n            });\n        }\n        \n        // Dispose of the renderer\n        if (this.renderer) {\n            this.renderer.dispose();\n            document.body.removeChild(this.renderer.domElement);\n        }\n        \n        // Dispose of combo system\n        if (this.comboSystem) {\n            this.comboSystem.dispose();\n        }\n        \n        // Clear arrays\n        this.fruits = [];\n        this.currentFruit = null;\n    }\n\n    removeFruit(fruit) {\n        this.scene.remove(fruit.mesh);\n        this.world.removeBody(fruit.body);\n        this.fruits = this.fruits.filter(f => f !== fruit);\n    }\n\n    spawnFruit() {\n        // Don't spawn if the game is over\n        if (this.gameOver) return;\n        \n        // Don't spawn if we already have a current fruit\n        if (this.currentFruit) return;\n        \n        // Generate next fruit type if we don't have one\n        if (!this.nextFruitType) {\n            this.generateNextFruit();\n        }\n        \n        // Calculate position based on current mouse position\n        let positionX = 0; // Default to center\n\n        // If we have a valid intersection point from mouse position, use it\n        if (this.intersectionPoint) {\n            // Only clamp based on fruit radius, allowing drops closer to edges\n            const radius = this.nextFruitType ? this.nextFruitType.radius : 0.5;\n            const maxX = (CONTAINER_WIDTH / 2) - radius;\n            positionX = Math.max(-maxX, Math.min(maxX, this.intersectionPoint.x));\n        }\n        \n        // Create a new fruit at the mouse X position, top of container\n        const position = new THREE.Vector3(positionX, CONTAINER_HEIGHT + 1, 0);\n        this.currentFruit = this.fruitFactory.createFruit(this.nextFruitType, position, true);\n        \n        // Make the current fruit kinematic until dropped\n        this.currentFruit.body.type = CANNON.Body.KINEMATIC;\n        this.currentFruit.body.velocity.set(0, 0, 0);\n        this.currentFruit.body.angularVelocity.set(0, 0, 0);\n        \n        // Generate the next fruit type immediately so the preview is accurate\n        this.generateNextFruit();\n    }\n\n    initDebugPanel() {\n        // Removed\n    }\n\n    onMouseMove(event) {\n        // Don't do anything if the game is over\n        if (this.gameOver) return;\n        \n        // Update mouse position\n        this.mousePosition.x = (event.clientX / window.innerWidth) * 2 - 1;\n        this.mousePosition.y = -((event.clientY / window.innerHeight) * 2 - 1);\n\n        // Update raycaster\n        this.raycaster.setFromCamera(this.mousePosition, this.camera);\n        this.raycaster.ray.intersectPlane(this.mousePlane, this.intersectionPoint);\n\n        // Only clamp based on fruit radius, allowing drops closer to edges\n        const radius = this.nextFruitType ? this.nextFruitType.radius : 0.5;\n        const maxX = (CONTAINER_WIDTH / 2) - radius;\n        const clampedX = Math.max(-maxX, Math.min(maxX, this.intersectionPoint.x));\n\n        if (!this.currentFruit) {\n            const position = new THREE.Vector3(\n                clampedX,\n                CONTAINER_HEIGHT + 1,\n                0\n            );\n            this.currentFruit = this.fruitFactory.createFruit(this.nextFruitType, position, true);\n            \n            // Make the current fruit kinematic until dropped\n            this.currentFruit.body.type = CANNON.Body.KINEMATIC;\n            this.currentFruit.body.velocity.set(0, 0, 0);\n            this.currentFruit.body.angularVelocity.set(0, 0, 0);\n        } else {\n            // Update both visual and physics positions\n            this.currentFruit.mesh.position.x = clampedX;\n            this.currentFruit.body.position.x = clampedX;\n            \n            // Keep Y and Z positions fixed\n            this.currentFruit.mesh.position.y = CONTAINER_HEIGHT + 1;\n            this.currentFruit.mesh.position.z = 0;\n            this.currentFruit.body.position.y = CONTAINER_HEIGHT + 1;\n            this.currentFruit.body.position.z = 0;\n        }\n    }\n\n    dropFruit() {\n        // Don't drop if game is over\n        if (this.gameOver) return;\n        \n        // Don't drop if we're in cooldown\n        if (this.dropCooldown) return;\n        \n        // Check if enough time has passed since last drop\n        const now = Date.now();\n        if (now - this.lastDropTime < DROP_DELAY) {\n            return; // Too soon to drop again\n        }\n\n        if (this.currentFruit) {\n            // Set cooldown flag to prevent rapid drops\n            this.dropCooldown = true;\n            this.lastDropTime = now;\n            \n            try {\n                // Make the fruit dynamic so it can be affected by physics\n                this.currentFruit.body.type = CANNON.Body.DYNAMIC;\n                \n                // Make it collide with other objects\n                this.currentFruit.body.collisionFilterGroup = 1;\n                this.currentFruit.body.collisionFilterMask = 1;\n                \n                // Set initial angular damping\n                this.currentFruit.body.angularDamping = 0.1;\n                \n                // Record drop time\n                this.currentFruit.dropTime = now;\n                \n                // Make fruit fully opaque\n                if (this.currentFruit.mesh && typeof this.currentFruit.mesh.traverse === 'function') {\n                    this.currentFruit.mesh.traverse((child) => {\n                        if (child.isMesh && child.material) {\n                            child.material = child.material.clone();\n                            child.material.opacity = 1;\n                        }\n                    });\n                }\n                \n                // Center and stabilize the fruit\n                this.currentFruit.body.position.z = 0;\n                if (this.currentFruit.mesh) {\n                    this.currentFruit.mesh.position.z = 0;\n                }\n                \n                // Add initial velocity and spin\n                this.currentFruit.body.velocity.set(0, -1, 0);\n                this.currentFruit.body.angularVelocity.set(0, 0, (Math.random() - 0.5) * 10);\n                \n                // Allow rotation\n                this.currentFruit.body.fixedRotation = false;\n                \n                // Update mass properties\n                if (typeof this.currentFruit.body.updateMassProperties === 'function') {\n                    this.currentFruit.body.updateMassProperties();\n                }\n                \n                // Play drop sound\n                audioManager.playDropSound();\n                \n                // Add to fruits array\n                this.fruits.push(this.currentFruit);\n                this.currentFruit = null;\n                \n                // Reset cooldown and spawn new fruit after delay\n                setTimeout(() => {\n                    this.dropCooldown = false;\n                    if (!this.gameOver) {\n                        this.spawnFruit();\n                    }\n                }, COOLDOWN_DELAY);\n                \n            } catch (error) {\n                console.error(\"Error dropping fruit:\", error);\n                this.currentFruit = null;\n                setTimeout(() => {\n                    this.dropCooldown = false;\n                    if (!this.gameOver) {\n                        this.spawnFruit();\n                    }\n                }, COOLDOWN_DELAY);\n            }\n        }\n    }\n\n    onWindowResize() {\n        // Don't do anything if the game is over\n        if (this.gameOver) return;\n        \n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    animate(timestamp) {\n        if (this.gameOver) return;\n        \n        // Request next frame\n        this.animationFrameId = requestAnimationFrame((newTimestamp) => this.animate(newTimestamp));\n        \n        // Calculate delta time with a maximum value to prevent large jumps\n        if (!this.lastTimestamp) {\n            this.lastTimestamp = timestamp || 0;\n        }\n        const deltaTime = timestamp ? Math.min((timestamp - this.lastTimestamp) / 1000, 0.1) : 1/60;\n        this.lastTimestamp = timestamp || 0;\n        \n        // Update physics world with proper time stepping\n        if (this.world) {\n            // Use fixed time steps for stability with interpolation for smooth rendering\n            const fixedTimeStep = 1/60;\n            const maxSubSteps = 3; // Allow up to 3 substeps to catch up if needed\n            this.world.step(fixedTimeStep, deltaTime, maxSubSteps);\n            \n            // Enforce 2D constraint on all fruits\n            for (const fruit of this.fruits) {\n                // Reset any z-position drift to exactly 0\n                if (fruit.body.position.z !== 0) {\n                    fruit.body.position.z = 0;\n                    fruit.mesh.position.z = 0;\n                }\n                \n                // Reset any z-velocity to 0\n                if (fruit.body.velocity.z !== 0) {\n                    fruit.body.velocity.z = 0;\n                }\n            }\n            \n            // Update mesh positions based on physics bodies\n            for (const fruit of this.fruits) {\n                if (fruit.body && fruit.mesh) {\n                    fruit.mesh.position.copy(fruit.body.position);\n                    fruit.mesh.quaternion.copy(fruit.body.quaternion);\n                }\n            }\n        }\n\n        // Update particle trails\n        this.fruitFactory.update();\n\n        // Check for collisions/merges\n        this.checkFruitCombinations();\n        this.checkGameOver();\n        this.preventBottomClipping();\n        this.stabilizeStackedFruits();\n\n        // Update combo system\n        if (this.comboSystem) {\n            this.comboSystem.update();\n        }\n\n        // Render scene\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    generateNextFruit() {\n        // Get a random small fruit for the next drop\n        const previousType = this.nextFruitType;\n        \n        // Keep trying until we get a different fruit type\n        do {\n            this.nextFruitType = this.getRandomSmallFruit();\n        } while (previousType && this.nextFruitType.name === previousType.name);\n        \n        // Update the next fruit display (if it exists)\n        const nextFruitDisplay = document.getElementById('next-fruit');\n        if (nextFruitDisplay) {\n            // Clear any existing content\n            while (nextFruitDisplay.firstChild) {\n                nextFruitDisplay.removeChild(nextFruitDisplay.firstChild);\n            }\n            \n            // Simple text update instead of 3D preview\n            nextFruitDisplay.textContent = `Next: ${this.nextFruitType.name}`;\n        }\n    }\n}\n\n// Global game instance\nlet game;\n\n// Load DOM first then init the game\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Show and initialize the UI elements\n    const scoreElement = document.getElementById('score');\n    const nextFruitElement = document.getElementById('next-fruit');\n    \n    scoreElement.textContent = 'Score: 0';\n    scoreElement.style.display = 'block';\n    \n    nextFruitElement.style.display = 'block';\n\n    // Start the game immediately\n    game = new SuikaGame();\n    game.init();\n    game.animate(0);\n\n    // Start audio on first interaction\n    const startAudio = () => {\n        audioManager.init();\n        audioManager.playBackgroundMusic();\n        // Remove the event listeners once audio is started\n        document.removeEventListener('click', startAudio);\n        document.removeEventListener('touchstart', startAudio);\n        document.removeEventListener('keydown', startAudio);\n    };\n\n    // Add listeners for various interaction types\n    document.addEventListener('click', startAudio);\n    document.addEventListener('touchstart', startAudio);\n    document.addEventListener('keydown', startAudio);\n});\n"],"names":["CONTAINER_WIDTH","CONTAINER_HEIGHT","CONTAINER_DEPTH","COOLDOWN_DELAY","DROP_DELAY","GAME_OVER_HEIGHT","PAPER_BAG_COLOR","PAPER_BAG_EMISSIVE","PAPER_BAG_EMISSIVE_INTENSITY","DEFAULT_MUSIC_VOLUME","DEFAULT_SOUND_EFFECTS_VOLUME","MAIN_LIGHT_INTENSITY","AMBIENT_LIGHT_INTENSITY","BAG_LIGHT_INTENSITY","SPOTLIGHT_INTENSITY","AudioManager","resumeAudio","event","now","oscillator","filter","gainNode","bufferSize","buffer","data","i","noiseSource","boomOsc","compressor","boomFilter","boomGain","noiseBuffer","noiseData","decay","noiseFilter","noiseGain","knockOsc","knockGain","audioContext","frequency","duration","name","sound","e","volumeControls","soundEffectsContainer","soundLabel","soundSlider","musicVolumeContainer","musicLabel","musicSlider","mainGain","currentTime","osc","synth","outputNode","startOffset","bassNotes","noteDuration","patternDuration","bassOscillator","bassFilter","bassEnvelope","iterations","j","startTime","melodyNotes","rhythmPattern","notes","rhythm","tempo","beatDuration","repeat","sequence","note","envelope","bar","barStartTime","time","velocity","audioManager","TextureManager","canvas","ctx","imageData","noise","edgeGradient","x1","y1","x2","y2","lineWidth","x","y","radius","stainGradient","opacity","THREE.CanvasTexture","THREE.RepeatWrapping","orangeCanvas","orangeCtx","orangeGradient","orangeImageData","orangeData","strawberryTextureSize","strawberryCanvas","strawberryCtx","gradient","watermelonTextureSize","watermelonCanvas","watermelonCtx","baseGreen","xRel","yRel","angle","grapeTextureSize","grapeCanvas","grapeCtx","baseGrape","grapeImageData","grapeData","altGrapeCanvas","altGrapeCtx","centerX","centerY","eyeSize","eyeSpacing","eyeY","leftEyeX","rightEyeX","noseWidth","noseHeight","noseY","smileY","curveLength","peachTextureSize","peachCanvas","peachCtx","peachGradient","size","alpha","appleTextureSize","appleCanvas","appleCtx","pearTextureSize","pearCanvas","pearCtx","pumpkinTextureSize","pumpkinCanvas","pumpkinCtx","posX","melonTextureSize","melonCanvas","melonCtx","baseColor","melonImageData","melonPixels","length","dataUrl","THREE.TextureLoader","ScoreManager","savedHighScore","score","points","ParticleTrailSystem","scene","starPoints","THREE.Vector2","starShape","THREE.Shape","THREE.ShapeGeometry","fruit","color","particles","THREE.Group","particle","THREE.Mesh","THREE.MeshBasicMaterial","THREE.DoubleSide","system","FruitFactory","world","fruitMaterial","textureManager","type","group","cherry","THREE.SphereGeometry","THREE.MeshPhongMaterial","stem","THREE.CylinderGeometry","bodyGeometry","positions","factor","z","distFromCenter","bumpAmount","bodyMaterial","THREE.MeshStandardMaterial","body","leafGroup","leafShape","leafWidth","leafLength","leafGeometry","leaf","indentationGeometry","indentation","stemGeometry","pearGeometry","peachGeometry","peachPositions","cleftFactor","yFactor","depthEffect","peachMaterial","stemPositions","segments","pumpkinGeometry","pumpkinMaterial","pumpkinVertices","ridgeOffset","newX","newZ","stemMaterial","geometry","material","watermelonGeometry","watermelonMaterial","watermelon","orangeGeometry","orangePositions","bumpFactor","orangeMaterial","orange","stemGroup","leafSize","useAltTexture","uvAttribute","posAttribute","phi","v","position","isCurrent","shape","CANNON.Sphere","CANNON.Body","CANNON.Vec3","relativeVelocity","volume","pitch","mesh","child","error","THREE.Vector3","THREE.Quaternion","CANNON.Quaternion","SocialShare","shareContainer","shareText","twitterButton","facebookButton","whatsAppButton","copyTextButton","text","clickHandler","button","cachedImageUrl","twitterUrl","challengeMessage","fbUrl","whatsappUrl","copyMessage","textarea","property","content","metaTag","socialShare","ComboSystem","context","texture","spriteMaterial","THREE.SpriteMaterial","THREE.Sprite","multiplier","fruitColor","particleCount","THREE.Color","THREE.CircleGeometry","speed","Leaderboard","saved","newEntry","entry","currentScore","container","title","scoreList","index","scoreEntry","rank","leaderboard","FRUITS","SuikaGame","THREE.Scene","THREE.PerspectiveCamera","THREE.WebGLRenderer","THREE.Raycaster","THREE.Plane","CANNON.World","CANNON.Material","fruitWallContact","CANNON.ContactMaterial","fruitFruitContact","bottomWall","leftWall","rightWall","backWall","floorSensor","CANNON.Box","halfExtents","mainLight","THREE.DirectionalLight","ambientLight","THREE.AmbientLight","bagLight","THREE.PointLight","spotLight","THREE.SpotLight","bottomShape","paperTexture","bagMaterial","bottom","THREE.BoxGeometry","leftSide","THREE.PlaneGeometry","rightSide","backSide","foldHeight","leftFold","rightFold","backFold","createFoldLine","width","height","rotationY","foldLine","smallFruits","lastFruit","availableFruits","f","selectedFruit","combinations","processedPairs","fruitA","fruitB","pairId","midpoint","nextType","basePoints","bonusPoints","fruitAboveLine","isAboveLine","isStable","hasGracePeriod","fruitBelowContainer","gameOverDiv","gameOverTitle","finalScore","finalScoreDiv","scoreInfo","scoreStatus","restartButton","leaderboardUI","correctionFactor","linearSpeed","angularSpeed","contactCount","hasBottomSupport","hasSideSupport","contact","normalDirection","object","positionX","maxX","clampedX","timestamp","newTimestamp","deltaTime","previousType","nextFruitDisplay","game","scoreElement","nextFruitElement","startAudio"],"mappings":"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"}